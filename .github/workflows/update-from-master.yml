name: Create PHP protobufs from latest Meshtastic Protobufs

on:
  schedule:
    - cron: "0 */3 * * *"
  workflow_dispatch:

jobs:
  update-from-master:
    name: Update from master
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Clone Meshtastic Protobufs repository
        uses: actions/checkout@v4
        with:
          repository: meshtastic/protobufs
          token: ${{ github.token }}
          path: ./protobufs
          fetch-depth: 0
          fetch-tags: true

      - name: Checkout Meshtastic Protobufs latest release tag
        id: checkout_protobufs
        run: |
          cd ./protobufs
          git reset --hard HEAD
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          git checkout $LATEST_TAG
          cd ..
          echo "LATEST_TAG=${LATEST_TAG}" >> "$GITHUB_ENV"
        shell: bash
        continue-on-error: false

      - name: Checkout current code
        uses: actions/checkout@v4
        with:
          ref: master
          token: ${{ github.token }}
          path: ./php-code
          fetch-depth: 0
          fetch-tags: true

      - name: Get latest tag of this repository
        id: get_current_tag
        run: |
          cd ./php-code
          git checkout master
          git reset --hard HEAD
          CURRENT_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) || echo "v0.0.0") # Default tag if none exist
          CURRENT_RELEASE=$(gh release view --json tagName --jq '.tagName' || echo "$CURRENT_TAG") # Use tag if no release
          cd ..
          echo "CURRENT_TAG=${CURRENT_TAG}" >> "$GITHUB_ENV"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        continue-on-error: false

      - name: Compare Versions and Proceed
        id: compare_versions
        run: |
          LATEST_TAG="${{ env.LATEST_TAG }}"
          CURRENT_TAG="${{ env.CURRENT_TAG }}"

          if [[ "$LATEST_TAG" == "$CURRENT_TAG" ]]; then
            echo "Versions are the same. No update required."
            echo "UPDATE_REQUIRED=false" >> "$GITHUB_ENV"
          else
            # Use version sort to compare the tags
            if [[ "$(printf '%s\n%s\n' "$CURRENT_TAG" "$LATEST_TAG" | sort -V | head -n 1)" == "$CURRENT_TAG" ]]; then
              echo "Latest tag is newer. Update required."
              echo "UPDATE_REQUIRED=true" >> "$GITHUB_ENV"
            else
              echo "Current tag is newer or equal. No update required."
              echo "UPDATE_REQUIRED=false" >> "$GITHUB_ENV"
            fi
          fi
        shell: bash

      - name: Show working directory
        if: env.UPDATE_REQUIRED == 'true'
        run: ls -lash ./*
        shell: bash

      - name: Install Protoc
        if: env.UPDATE_REQUIRED == 'true'
        uses: arduino/setup-protoc@v3

      - name: Check protoc is installed
        if: env.UPDATE_REQUIRED == 'true'
        run: which protoc
        shell: bash

      - name: Create output directory
        if: env.UPDATE_REQUIRED == 'true'
        run: mkdir -p ./protobufs-output
        shell: bash

      - name: Show working directory
        if: env.UPDATE_REQUIRED == 'true'
        run: ls -lash ./*
        shell: bash

      - name: Convert the nanopb.proto file to proto3
        if: env.UPDATE_REQUIRED == 'true'
        run: |
          cd ./protobufs
          sed -i 's/proto2/proto3/g' ./nanopb.proto
          sed -i 's/ \[default = [^;]*//g' ./nanopb.proto
          sed -i 's/optional google.protobuf.FieldDescriptorProto/\/\/ optional google.protobuf.FieldDescriptorProto/g' ./nanopb.proto
          cd ..
        shell: bash

      - name: Generate the PHP files from the protobufs
        if: env.UPDATE_REQUIRED == 'true'
        run: |
          cd ./protobufs
          find . -type f -iname '*.proto' -exec protoc --proto_path= --php_out=../protobufs-output {} \;
          cd ..
        shell: bash

      - name: Replace the current protobuf PHP files with the ones we just generated
        if: env.UPDATE_REQUIRED == 'true'
        run: |
          rm -rf ./php-code/src/GPBMetadata
          rm -rf ./php-code/src/Meshtastic
          mv ./protobufs-output/GPBMetadata ./php-code/src/
          mv ./protobufs-output/Meshtastic ./php-code/src/
        shell: bash

      - name: Commit and push changes
        if: env.UPDATE_REQUIRED == 'true'
        run: |
          cd ./php-code
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add .
          git commit -m "Update protobufs to latest version"
          git push origin master
          git tag -a $LATEST_TAG -m "Update protobufs to latest version"
          git push --tags origin master
        shell: bash

      - name: Create Release
        id: create_release
        if: env.UPDATE_REQUIRED == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.LATEST_TAG }}
          release_name: Release ${{ env.LATEST_TAG }}
          body: |
            You can read the full changelog [here](https://github.com/meshtastic/protobufs/releases).

            Changelog for this version tag is [here](https://github.com/meshtastic/protobufs/releases/tag/${{ env.LATEST_TAG }})
          draft: false
          prerelease: false
        continue-on-error: true
