<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/interdevice.proto

namespace Meshtastic;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>meshtastic.InterdeviceMessage</code>
 */
class InterdeviceMessage extends \Google\Protobuf\Internal\Message
{
    protected $data;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $nmea
     *     @type \Meshtastic\SensorData $sensor
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Meshtastic\Interdevice::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string nmea = 1;</code>
     * @return string
     */
    public function getNmea()
    {
        return $this->readOneof(1);
    }

    public function hasNmea()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>string nmea = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setNmea($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.meshtastic.SensorData sensor = 2;</code>
     * @return \Meshtastic\SensorData|null
     */
    public function getSensor()
    {
        return $this->readOneof(2);
    }

    public function hasSensor()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.meshtastic.SensorData sensor = 2;</code>
     * @param \Meshtastic\SensorData $var
     * @return $this
     */
    public function setSensor($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\SensorData::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getData()
    {
        return $this->whichOneof("data");
    }

}

