<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/mesh.proto

namespace Meshtastic;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Packets from the radio to the phone will appear on the fromRadio characteristic.
 * It will support READ and NOTIFY. When a new packet arrives the device will BLE notify?
 * It will sit in that descriptor until consumed by the phone,
 * at which point the next item in the FIFO will be populated.
 *
 * Generated from protobuf message <code>meshtastic.FromRadio</code>
 */
class FromRadio extends \Google\Protobuf\Internal\Message
{
    /**
     * The packet id, used to allow the phone to request missing read packets from the FIFO,
     * see our bluetooth docs
     *
     * Generated from protobuf field <code>uint32 id = 1;</code>
     */
    protected $id = 0;
    protected $payload_variant;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $id
     *           The packet id, used to allow the phone to request missing read packets from the FIFO,
     *           see our bluetooth docs
     *     @type \Meshtastic\MeshPacket $packet
     *           Log levels, chosen to match python logging conventions.
     *     @type \Meshtastic\MyNodeInfo $my_info
     *           Tells the phone what our node number is, can be -1 if we've not yet joined a mesh.
     *           NOTE: This ID must not change - to keep (minimal) compatibility with <1.2 version of android apps.
     *     @type \Meshtastic\NodeInfo $node_info
     *           One packet is sent for each node in the on radio DB
     *           starts over with the first node in our DB
     *     @type \Meshtastic\Config $config
     *           Include a part of the config (was: RadioConfig radio)
     *     @type \Meshtastic\LogRecord $log_record
     *           Set to send debug console output over our protobuf stream
     *     @type int $config_complete_id
     *           Sent as true once the device has finished sending all of the responses to want_config
     *           recipient should check if this ID matches our original request nonce, if
     *           not, it means your config responses haven't started yet.
     *           NOTE: This ID must not change - to keep (minimal) compatibility with <1.2 version of android apps.
     *     @type bool $rebooted
     *           Sent to tell clients the radio has just rebooted.
     *           Set to true if present.
     *           Not used on all transports, currently just used for the serial console.
     *           NOTE: This ID must not change - to keep (minimal) compatibility with <1.2 version of android apps.
     *     @type \Meshtastic\ModuleConfig $moduleConfig
     *           Include module config
     *     @type \Meshtastic\Channel $channel
     *           One packet is sent for each channel
     *     @type \Meshtastic\QueueStatus $queueStatus
     *           Queue status info
     *     @type \Meshtastic\XModem $xmodemPacket
     *           File Transfer Chunk
     *     @type \Meshtastic\DeviceMetadata $metadata
     *           Device metadata message
     *     @type \Meshtastic\MqttClientProxyMessage $mqttClientProxyMessage
     *           MQTT Client Proxy Message (device sending to client / phone for publishing to MQTT)
     *     @type \Meshtastic\FileInfo $fileInfo
     *           File system manifest messages
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Meshtastic\Mesh::initOnce();
        parent::__construct($data);
    }

    /**
     * The packet id, used to allow the phone to request missing read packets from the FIFO,
     * see our bluetooth docs
     *
     * Generated from protobuf field <code>uint32 id = 1;</code>
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * The packet id, used to allow the phone to request missing read packets from the FIFO,
     * see our bluetooth docs
     *
     * Generated from protobuf field <code>uint32 id = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkUint32($var);
        $this->id = $var;

        return $this;
    }

    /**
     * Log levels, chosen to match python logging conventions.
     *
     * Generated from protobuf field <code>.meshtastic.MeshPacket packet = 2;</code>
     * @return \Meshtastic\MeshPacket|null
     */
    public function getPacket()
    {
        return $this->readOneof(2);
    }

    public function hasPacket()
    {
        return $this->hasOneof(2);
    }

    /**
     * Log levels, chosen to match python logging conventions.
     *
     * Generated from protobuf field <code>.meshtastic.MeshPacket packet = 2;</code>
     * @param \Meshtastic\MeshPacket $var
     * @return $this
     */
    public function setPacket($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\MeshPacket::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Tells the phone what our node number is, can be -1 if we've not yet joined a mesh.
     * NOTE: This ID must not change - to keep (minimal) compatibility with <1.2 version of android apps.
     *
     * Generated from protobuf field <code>.meshtastic.MyNodeInfo my_info = 3;</code>
     * @return \Meshtastic\MyNodeInfo|null
     */
    public function getMyInfo()
    {
        return $this->readOneof(3);
    }

    public function hasMyInfo()
    {
        return $this->hasOneof(3);
    }

    /**
     * Tells the phone what our node number is, can be -1 if we've not yet joined a mesh.
     * NOTE: This ID must not change - to keep (minimal) compatibility with <1.2 version of android apps.
     *
     * Generated from protobuf field <code>.meshtastic.MyNodeInfo my_info = 3;</code>
     * @param \Meshtastic\MyNodeInfo $var
     * @return $this
     */
    public function setMyInfo($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\MyNodeInfo::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * One packet is sent for each node in the on radio DB
     * starts over with the first node in our DB
     *
     * Generated from protobuf field <code>.meshtastic.NodeInfo node_info = 4;</code>
     * @return \Meshtastic\NodeInfo|null
     */
    public function getNodeInfo()
    {
        return $this->readOneof(4);
    }

    public function hasNodeInfo()
    {
        return $this->hasOneof(4);
    }

    /**
     * One packet is sent for each node in the on radio DB
     * starts over with the first node in our DB
     *
     * Generated from protobuf field <code>.meshtastic.NodeInfo node_info = 4;</code>
     * @param \Meshtastic\NodeInfo $var
     * @return $this
     */
    public function setNodeInfo($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\NodeInfo::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Include a part of the config (was: RadioConfig radio)
     *
     * Generated from protobuf field <code>.meshtastic.Config config = 5;</code>
     * @return \Meshtastic\Config|null
     */
    public function getConfig()
    {
        return $this->readOneof(5);
    }

    public function hasConfig()
    {
        return $this->hasOneof(5);
    }

    /**
     * Include a part of the config (was: RadioConfig radio)
     *
     * Generated from protobuf field <code>.meshtastic.Config config = 5;</code>
     * @param \Meshtastic\Config $var
     * @return $this
     */
    public function setConfig($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\Config::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Set to send debug console output over our protobuf stream
     *
     * Generated from protobuf field <code>.meshtastic.LogRecord log_record = 6;</code>
     * @return \Meshtastic\LogRecord|null
     */
    public function getLogRecord()
    {
        return $this->readOneof(6);
    }

    public function hasLogRecord()
    {
        return $this->hasOneof(6);
    }

    /**
     * Set to send debug console output over our protobuf stream
     *
     * Generated from protobuf field <code>.meshtastic.LogRecord log_record = 6;</code>
     * @param \Meshtastic\LogRecord $var
     * @return $this
     */
    public function setLogRecord($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\LogRecord::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * Sent as true once the device has finished sending all of the responses to want_config
     * recipient should check if this ID matches our original request nonce, if
     * not, it means your config responses haven't started yet.
     * NOTE: This ID must not change - to keep (minimal) compatibility with <1.2 version of android apps.
     *
     * Generated from protobuf field <code>uint32 config_complete_id = 7;</code>
     * @return int
     */
    public function getConfigCompleteId()
    {
        return $this->readOneof(7);
    }

    public function hasConfigCompleteId()
    {
        return $this->hasOneof(7);
    }

    /**
     * Sent as true once the device has finished sending all of the responses to want_config
     * recipient should check if this ID matches our original request nonce, if
     * not, it means your config responses haven't started yet.
     * NOTE: This ID must not change - to keep (minimal) compatibility with <1.2 version of android apps.
     *
     * Generated from protobuf field <code>uint32 config_complete_id = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setConfigCompleteId($var)
    {
        GPBUtil::checkUint32($var);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * Sent to tell clients the radio has just rebooted.
     * Set to true if present.
     * Not used on all transports, currently just used for the serial console.
     * NOTE: This ID must not change - to keep (minimal) compatibility with <1.2 version of android apps.
     *
     * Generated from protobuf field <code>bool rebooted = 8;</code>
     * @return bool
     */
    public function getRebooted()
    {
        return $this->readOneof(8);
    }

    public function hasRebooted()
    {
        return $this->hasOneof(8);
    }

    /**
     * Sent to tell clients the radio has just rebooted.
     * Set to true if present.
     * Not used on all transports, currently just used for the serial console.
     * NOTE: This ID must not change - to keep (minimal) compatibility with <1.2 version of android apps.
     *
     * Generated from protobuf field <code>bool rebooted = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setRebooted($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * Include module config
     *
     * Generated from protobuf field <code>.meshtastic.ModuleConfig moduleConfig = 9;</code>
     * @return \Meshtastic\ModuleConfig|null
     */
    public function getModuleConfig()
    {
        return $this->readOneof(9);
    }

    public function hasModuleConfig()
    {
        return $this->hasOneof(9);
    }

    /**
     * Include module config
     *
     * Generated from protobuf field <code>.meshtastic.ModuleConfig moduleConfig = 9;</code>
     * @param \Meshtastic\ModuleConfig $var
     * @return $this
     */
    public function setModuleConfig($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\ModuleConfig::class);
        $this->writeOneof(9, $var);

        return $this;
    }

    /**
     * One packet is sent for each channel
     *
     * Generated from protobuf field <code>.meshtastic.Channel channel = 10;</code>
     * @return \Meshtastic\Channel|null
     */
    public function getChannel()
    {
        return $this->readOneof(10);
    }

    public function hasChannel()
    {
        return $this->hasOneof(10);
    }

    /**
     * One packet is sent for each channel
     *
     * Generated from protobuf field <code>.meshtastic.Channel channel = 10;</code>
     * @param \Meshtastic\Channel $var
     * @return $this
     */
    public function setChannel($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\Channel::class);
        $this->writeOneof(10, $var);

        return $this;
    }

    /**
     * Queue status info
     *
     * Generated from protobuf field <code>.meshtastic.QueueStatus queueStatus = 11;</code>
     * @return \Meshtastic\QueueStatus|null
     */
    public function getQueueStatus()
    {
        return $this->readOneof(11);
    }

    public function hasQueueStatus()
    {
        return $this->hasOneof(11);
    }

    /**
     * Queue status info
     *
     * Generated from protobuf field <code>.meshtastic.QueueStatus queueStatus = 11;</code>
     * @param \Meshtastic\QueueStatus $var
     * @return $this
     */
    public function setQueueStatus($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\QueueStatus::class);
        $this->writeOneof(11, $var);

        return $this;
    }

    /**
     * File Transfer Chunk
     *
     * Generated from protobuf field <code>.meshtastic.XModem xmodemPacket = 12;</code>
     * @return \Meshtastic\XModem|null
     */
    public function getXmodemPacket()
    {
        return $this->readOneof(12);
    }

    public function hasXmodemPacket()
    {
        return $this->hasOneof(12);
    }

    /**
     * File Transfer Chunk
     *
     * Generated from protobuf field <code>.meshtastic.XModem xmodemPacket = 12;</code>
     * @param \Meshtastic\XModem $var
     * @return $this
     */
    public function setXmodemPacket($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\XModem::class);
        $this->writeOneof(12, $var);

        return $this;
    }

    /**
     * Device metadata message
     *
     * Generated from protobuf field <code>.meshtastic.DeviceMetadata metadata = 13;</code>
     * @return \Meshtastic\DeviceMetadata|null
     */
    public function getMetadata()
    {
        return $this->readOneof(13);
    }

    public function hasMetadata()
    {
        return $this->hasOneof(13);
    }

    /**
     * Device metadata message
     *
     * Generated from protobuf field <code>.meshtastic.DeviceMetadata metadata = 13;</code>
     * @param \Meshtastic\DeviceMetadata $var
     * @return $this
     */
    public function setMetadata($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\DeviceMetadata::class);
        $this->writeOneof(13, $var);

        return $this;
    }

    /**
     * MQTT Client Proxy Message (device sending to client / phone for publishing to MQTT)
     *
     * Generated from protobuf field <code>.meshtastic.MqttClientProxyMessage mqttClientProxyMessage = 14;</code>
     * @return \Meshtastic\MqttClientProxyMessage|null
     */
    public function getMqttClientProxyMessage()
    {
        return $this->readOneof(14);
    }

    public function hasMqttClientProxyMessage()
    {
        return $this->hasOneof(14);
    }

    /**
     * MQTT Client Proxy Message (device sending to client / phone for publishing to MQTT)
     *
     * Generated from protobuf field <code>.meshtastic.MqttClientProxyMessage mqttClientProxyMessage = 14;</code>
     * @param \Meshtastic\MqttClientProxyMessage $var
     * @return $this
     */
    public function setMqttClientProxyMessage($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\MqttClientProxyMessage::class);
        $this->writeOneof(14, $var);

        return $this;
    }

    /**
     * File system manifest messages
     *
     * Generated from protobuf field <code>.meshtastic.FileInfo fileInfo = 15;</code>
     * @return \Meshtastic\FileInfo|null
     */
    public function getFileInfo()
    {
        return $this->readOneof(15);
    }

    public function hasFileInfo()
    {
        return $this->hasOneof(15);
    }

    /**
     * File system manifest messages
     *
     * Generated from protobuf field <code>.meshtastic.FileInfo fileInfo = 15;</code>
     * @param \Meshtastic\FileInfo $var
     * @return $this
     */
    public function setFileInfo($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\FileInfo::class);
        $this->writeOneof(15, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getPayloadVariant()
    {
        return $this->whichOneof("payload_variant");
    }

}

