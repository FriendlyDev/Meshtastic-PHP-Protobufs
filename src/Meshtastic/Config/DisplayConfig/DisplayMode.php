<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/config.proto

namespace Meshtastic\Config\DisplayConfig;

use UnexpectedValueException;

/**
 * Protobuf type <code>meshtastic.Config.DisplayConfig.DisplayMode</code>
 */
class DisplayMode
{
    /**
     * Default. The old style for the 128x64 OLED screen
     *
     * Generated from protobuf enum <code>DEFAULT = 0;</code>
     */
    const PBDEFAULT = 0;
    /**
     * Rearrange display elements to cater for bicolor OLED displays
     *
     * Generated from protobuf enum <code>TWOCOLOR = 1;</code>
     */
    const TWOCOLOR = 1;
    /**
     * Same as TwoColor, but with inverted top bar. Not so good for Epaper displays
     *
     * Generated from protobuf enum <code>INVERTED = 2;</code>
     */
    const INVERTED = 2;
    /**
     * TFT Full Color Displays (not implemented yet)
     *
     * Generated from protobuf enum <code>COLOR = 3;</code>
     */
    const COLOR = 3;

    private static $valueToName = [
        self::PBDEFAULT => 'DEFAULT',
        self::TWOCOLOR => 'TWOCOLOR',
        self::INVERTED => 'INVERTED',
        self::COLOR => 'COLOR',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            $pbconst =  __CLASS__. '::PB' . strtoupper($name);
            if (!defined($pbconst)) {
                throw new UnexpectedValueException(sprintf(
                        'Enum %s has no value defined for name %s', __CLASS__, $name));
            }
            return constant($pbconst);
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(DisplayMode::class, \Meshtastic\Config_DisplayConfig_DisplayMode::class);

