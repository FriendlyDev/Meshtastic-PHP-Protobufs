<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/config.proto

namespace Meshtastic\Config;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>meshtastic.Config.SecurityConfig</code>
 */
class SecurityConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * The public key of the user's device.
     * Sent out to other nodes on the mesh to allow them to compute a shared secret key.
     *
     * Generated from protobuf field <code>bytes public_key = 1;</code>
     */
    protected $public_key = '';
    /**
     * The private key of the device.
     * Used to create a shared key with a remote device.
     *
     * Generated from protobuf field <code>bytes private_key = 2;</code>
     */
    protected $private_key = '';
    /**
     * The public key authorized to send admin messages to this node.
     *
     * Generated from protobuf field <code>repeated bytes admin_key = 3;</code>
     */
    private $admin_key;
    /**
     * If true, device is considered to be "managed" by a mesh administrator via admin messages
     * Device is managed by a mesh administrator.
     *
     * Generated from protobuf field <code>bool is_managed = 4;</code>
     */
    protected $is_managed = false;
    /**
     * Serial Console over the Stream API."
     *
     * Generated from protobuf field <code>bool serial_enabled = 5;</code>
     */
    protected $serial_enabled = false;
    /**
     * By default we turn off logging as soon as an API client connects (to keep shared serial link quiet).
     * Output live debug logging over serial or bluetooth is set to true.
     *
     * Generated from protobuf field <code>bool debug_log_api_enabled = 6;</code>
     */
    protected $debug_log_api_enabled = false;
    /**
     * Allow incoming device control over the insecure legacy admin channel.
     *
     * Generated from protobuf field <code>bool admin_channel_enabled = 8;</code>
     */
    protected $admin_channel_enabled = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $public_key
     *           The public key of the user's device.
     *           Sent out to other nodes on the mesh to allow them to compute a shared secret key.
     *     @type string $private_key
     *           The private key of the device.
     *           Used to create a shared key with a remote device.
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $admin_key
     *           The public key authorized to send admin messages to this node.
     *     @type bool $is_managed
     *           If true, device is considered to be "managed" by a mesh administrator via admin messages
     *           Device is managed by a mesh administrator.
     *     @type bool $serial_enabled
     *           Serial Console over the Stream API."
     *     @type bool $debug_log_api_enabled
     *           By default we turn off logging as soon as an API client connects (to keep shared serial link quiet).
     *           Output live debug logging over serial or bluetooth is set to true.
     *     @type bool $admin_channel_enabled
     *           Allow incoming device control over the insecure legacy admin channel.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Meshtastic\Config::initOnce();
        parent::__construct($data);
    }

    /**
     * The public key of the user's device.
     * Sent out to other nodes on the mesh to allow them to compute a shared secret key.
     *
     * Generated from protobuf field <code>bytes public_key = 1;</code>
     * @return string
     */
    public function getPublicKey()
    {
        return $this->public_key;
    }

    /**
     * The public key of the user's device.
     * Sent out to other nodes on the mesh to allow them to compute a shared secret key.
     *
     * Generated from protobuf field <code>bytes public_key = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setPublicKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->public_key = $var;

        return $this;
    }

    /**
     * The private key of the device.
     * Used to create a shared key with a remote device.
     *
     * Generated from protobuf field <code>bytes private_key = 2;</code>
     * @return string
     */
    public function getPrivateKey()
    {
        return $this->private_key;
    }

    /**
     * The private key of the device.
     * Used to create a shared key with a remote device.
     *
     * Generated from protobuf field <code>bytes private_key = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setPrivateKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->private_key = $var;

        return $this;
    }

    /**
     * The public key authorized to send admin messages to this node.
     *
     * Generated from protobuf field <code>repeated bytes admin_key = 3;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getAdminKey()
    {
        return $this->admin_key;
    }

    /**
     * The public key authorized to send admin messages to this node.
     *
     * Generated from protobuf field <code>repeated bytes admin_key = 3;</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setAdminKey($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::BYTES);
        $this->admin_key = $arr;

        return $this;
    }

    /**
     * If true, device is considered to be "managed" by a mesh administrator via admin messages
     * Device is managed by a mesh administrator.
     *
     * Generated from protobuf field <code>bool is_managed = 4;</code>
     * @return bool
     */
    public function getIsManaged()
    {
        return $this->is_managed;
    }

    /**
     * If true, device is considered to be "managed" by a mesh administrator via admin messages
     * Device is managed by a mesh administrator.
     *
     * Generated from protobuf field <code>bool is_managed = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsManaged($var)
    {
        GPBUtil::checkBool($var);
        $this->is_managed = $var;

        return $this;
    }

    /**
     * Serial Console over the Stream API."
     *
     * Generated from protobuf field <code>bool serial_enabled = 5;</code>
     * @return bool
     */
    public function getSerialEnabled()
    {
        return $this->serial_enabled;
    }

    /**
     * Serial Console over the Stream API."
     *
     * Generated from protobuf field <code>bool serial_enabled = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setSerialEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->serial_enabled = $var;

        return $this;
    }

    /**
     * By default we turn off logging as soon as an API client connects (to keep shared serial link quiet).
     * Output live debug logging over serial or bluetooth is set to true.
     *
     * Generated from protobuf field <code>bool debug_log_api_enabled = 6;</code>
     * @return bool
     */
    public function getDebugLogApiEnabled()
    {
        return $this->debug_log_api_enabled;
    }

    /**
     * By default we turn off logging as soon as an API client connects (to keep shared serial link quiet).
     * Output live debug logging over serial or bluetooth is set to true.
     *
     * Generated from protobuf field <code>bool debug_log_api_enabled = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setDebugLogApiEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->debug_log_api_enabled = $var;

        return $this;
    }

    /**
     * Allow incoming device control over the insecure legacy admin channel.
     *
     * Generated from protobuf field <code>bool admin_channel_enabled = 8;</code>
     * @return bool
     */
    public function getAdminChannelEnabled()
    {
        return $this->admin_channel_enabled;
    }

    /**
     * Allow incoming device control over the insecure legacy admin channel.
     *
     * Generated from protobuf field <code>bool admin_channel_enabled = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setAdminChannelEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->admin_channel_enabled = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(SecurityConfig::class, \Meshtastic\Config_SecurityConfig::class);

