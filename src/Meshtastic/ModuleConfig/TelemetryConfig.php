<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/module_config.proto

namespace Meshtastic\ModuleConfig;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Configuration for both device and environment metrics
 *
 * Generated from protobuf message <code>meshtastic.ModuleConfig.TelemetryConfig</code>
 */
class TelemetryConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * Interval in seconds of how often we should try to send our
     * device metrics to the mesh
     *
     * Generated from protobuf field <code>uint32 device_update_interval = 1;</code>
     */
    protected $device_update_interval = 0;
    /**
     * Generated from protobuf field <code>uint32 environment_update_interval = 2;</code>
     */
    protected $environment_update_interval = 0;
    /**
     * Preferences for the Telemetry Module (Environment)
     * Enable/Disable the telemetry measurement module measurement collection
     *
     * Generated from protobuf field <code>bool environment_measurement_enabled = 3;</code>
     */
    protected $environment_measurement_enabled = false;
    /**
     * Enable/Disable the telemetry measurement module on-device display
     *
     * Generated from protobuf field <code>bool environment_screen_enabled = 4;</code>
     */
    protected $environment_screen_enabled = false;
    /**
     * We'll always read the sensor in Celsius, but sometimes we might want to
     * display the results in Fahrenheit as a "user preference".
     *
     * Generated from protobuf field <code>bool environment_display_fahrenheit = 5;</code>
     */
    protected $environment_display_fahrenheit = false;
    /**
     * Enable/Disable the air quality metrics
     *
     * Generated from protobuf field <code>bool air_quality_enabled = 6;</code>
     */
    protected $air_quality_enabled = false;
    /**
     * Interval in seconds of how often we should try to send our
     * air quality metrics to the mesh
     *
     * Generated from protobuf field <code>uint32 air_quality_interval = 7;</code>
     */
    protected $air_quality_interval = 0;
    /**
     * Enable/disable Power metrics
     *
     * Generated from protobuf field <code>bool power_measurement_enabled = 8;</code>
     */
    protected $power_measurement_enabled = false;
    /**
     * Interval in seconds of how often we should try to send our
     * power metrics to the mesh
     *
     * Generated from protobuf field <code>uint32 power_update_interval = 9;</code>
     */
    protected $power_update_interval = 0;
    /**
     * Enable/Disable the power measurement module on-device display
     *
     * Generated from protobuf field <code>bool power_screen_enabled = 10;</code>
     */
    protected $power_screen_enabled = false;
    /**
     * Preferences for the (Health) Telemetry Module
     * Enable/Disable the telemetry measurement module measurement collection
     *
     * Generated from protobuf field <code>bool health_measurement_enabled = 11;</code>
     */
    protected $health_measurement_enabled = false;
    /**
     * Interval in seconds of how often we should try to send our
     * health metrics to the mesh
     *
     * Generated from protobuf field <code>uint32 health_update_interval = 12;</code>
     */
    protected $health_update_interval = 0;
    /**
     * Enable/Disable the health telemetry module on-device display
     *
     * Generated from protobuf field <code>bool health_screen_enabled = 13;</code>
     */
    protected $health_screen_enabled = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $device_update_interval
     *           Interval in seconds of how often we should try to send our
     *           device metrics to the mesh
     *     @type int $environment_update_interval
     *     @type bool $environment_measurement_enabled
     *           Preferences for the Telemetry Module (Environment)
     *           Enable/Disable the telemetry measurement module measurement collection
     *     @type bool $environment_screen_enabled
     *           Enable/Disable the telemetry measurement module on-device display
     *     @type bool $environment_display_fahrenheit
     *           We'll always read the sensor in Celsius, but sometimes we might want to
     *           display the results in Fahrenheit as a "user preference".
     *     @type bool $air_quality_enabled
     *           Enable/Disable the air quality metrics
     *     @type int $air_quality_interval
     *           Interval in seconds of how often we should try to send our
     *           air quality metrics to the mesh
     *     @type bool $power_measurement_enabled
     *           Enable/disable Power metrics
     *     @type int $power_update_interval
     *           Interval in seconds of how often we should try to send our
     *           power metrics to the mesh
     *     @type bool $power_screen_enabled
     *           Enable/Disable the power measurement module on-device display
     *     @type bool $health_measurement_enabled
     *           Preferences for the (Health) Telemetry Module
     *           Enable/Disable the telemetry measurement module measurement collection
     *     @type int $health_update_interval
     *           Interval in seconds of how often we should try to send our
     *           health metrics to the mesh
     *     @type bool $health_screen_enabled
     *           Enable/Disable the health telemetry module on-device display
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Meshtastic\ModuleConfig::initOnce();
        parent::__construct($data);
    }

    /**
     * Interval in seconds of how often we should try to send our
     * device metrics to the mesh
     *
     * Generated from protobuf field <code>uint32 device_update_interval = 1;</code>
     * @return int
     */
    public function getDeviceUpdateInterval()
    {
        return $this->device_update_interval;
    }

    /**
     * Interval in seconds of how often we should try to send our
     * device metrics to the mesh
     *
     * Generated from protobuf field <code>uint32 device_update_interval = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setDeviceUpdateInterval($var)
    {
        GPBUtil::checkUint32($var);
        $this->device_update_interval = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 environment_update_interval = 2;</code>
     * @return int
     */
    public function getEnvironmentUpdateInterval()
    {
        return $this->environment_update_interval;
    }

    /**
     * Generated from protobuf field <code>uint32 environment_update_interval = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setEnvironmentUpdateInterval($var)
    {
        GPBUtil::checkUint32($var);
        $this->environment_update_interval = $var;

        return $this;
    }

    /**
     * Preferences for the Telemetry Module (Environment)
     * Enable/Disable the telemetry measurement module measurement collection
     *
     * Generated from protobuf field <code>bool environment_measurement_enabled = 3;</code>
     * @return bool
     */
    public function getEnvironmentMeasurementEnabled()
    {
        return $this->environment_measurement_enabled;
    }

    /**
     * Preferences for the Telemetry Module (Environment)
     * Enable/Disable the telemetry measurement module measurement collection
     *
     * Generated from protobuf field <code>bool environment_measurement_enabled = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setEnvironmentMeasurementEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->environment_measurement_enabled = $var;

        return $this;
    }

    /**
     * Enable/Disable the telemetry measurement module on-device display
     *
     * Generated from protobuf field <code>bool environment_screen_enabled = 4;</code>
     * @return bool
     */
    public function getEnvironmentScreenEnabled()
    {
        return $this->environment_screen_enabled;
    }

    /**
     * Enable/Disable the telemetry measurement module on-device display
     *
     * Generated from protobuf field <code>bool environment_screen_enabled = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setEnvironmentScreenEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->environment_screen_enabled = $var;

        return $this;
    }

    /**
     * We'll always read the sensor in Celsius, but sometimes we might want to
     * display the results in Fahrenheit as a "user preference".
     *
     * Generated from protobuf field <code>bool environment_display_fahrenheit = 5;</code>
     * @return bool
     */
    public function getEnvironmentDisplayFahrenheit()
    {
        return $this->environment_display_fahrenheit;
    }

    /**
     * We'll always read the sensor in Celsius, but sometimes we might want to
     * display the results in Fahrenheit as a "user preference".
     *
     * Generated from protobuf field <code>bool environment_display_fahrenheit = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setEnvironmentDisplayFahrenheit($var)
    {
        GPBUtil::checkBool($var);
        $this->environment_display_fahrenheit = $var;

        return $this;
    }

    /**
     * Enable/Disable the air quality metrics
     *
     * Generated from protobuf field <code>bool air_quality_enabled = 6;</code>
     * @return bool
     */
    public function getAirQualityEnabled()
    {
        return $this->air_quality_enabled;
    }

    /**
     * Enable/Disable the air quality metrics
     *
     * Generated from protobuf field <code>bool air_quality_enabled = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setAirQualityEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->air_quality_enabled = $var;

        return $this;
    }

    /**
     * Interval in seconds of how often we should try to send our
     * air quality metrics to the mesh
     *
     * Generated from protobuf field <code>uint32 air_quality_interval = 7;</code>
     * @return int
     */
    public function getAirQualityInterval()
    {
        return $this->air_quality_interval;
    }

    /**
     * Interval in seconds of how often we should try to send our
     * air quality metrics to the mesh
     *
     * Generated from protobuf field <code>uint32 air_quality_interval = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setAirQualityInterval($var)
    {
        GPBUtil::checkUint32($var);
        $this->air_quality_interval = $var;

        return $this;
    }

    /**
     * Enable/disable Power metrics
     *
     * Generated from protobuf field <code>bool power_measurement_enabled = 8;</code>
     * @return bool
     */
    public function getPowerMeasurementEnabled()
    {
        return $this->power_measurement_enabled;
    }

    /**
     * Enable/disable Power metrics
     *
     * Generated from protobuf field <code>bool power_measurement_enabled = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setPowerMeasurementEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->power_measurement_enabled = $var;

        return $this;
    }

    /**
     * Interval in seconds of how often we should try to send our
     * power metrics to the mesh
     *
     * Generated from protobuf field <code>uint32 power_update_interval = 9;</code>
     * @return int
     */
    public function getPowerUpdateInterval()
    {
        return $this->power_update_interval;
    }

    /**
     * Interval in seconds of how often we should try to send our
     * power metrics to the mesh
     *
     * Generated from protobuf field <code>uint32 power_update_interval = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setPowerUpdateInterval($var)
    {
        GPBUtil::checkUint32($var);
        $this->power_update_interval = $var;

        return $this;
    }

    /**
     * Enable/Disable the power measurement module on-device display
     *
     * Generated from protobuf field <code>bool power_screen_enabled = 10;</code>
     * @return bool
     */
    public function getPowerScreenEnabled()
    {
        return $this->power_screen_enabled;
    }

    /**
     * Enable/Disable the power measurement module on-device display
     *
     * Generated from protobuf field <code>bool power_screen_enabled = 10;</code>
     * @param bool $var
     * @return $this
     */
    public function setPowerScreenEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->power_screen_enabled = $var;

        return $this;
    }

    /**
     * Preferences for the (Health) Telemetry Module
     * Enable/Disable the telemetry measurement module measurement collection
     *
     * Generated from protobuf field <code>bool health_measurement_enabled = 11;</code>
     * @return bool
     */
    public function getHealthMeasurementEnabled()
    {
        return $this->health_measurement_enabled;
    }

    /**
     * Preferences for the (Health) Telemetry Module
     * Enable/Disable the telemetry measurement module measurement collection
     *
     * Generated from protobuf field <code>bool health_measurement_enabled = 11;</code>
     * @param bool $var
     * @return $this
     */
    public function setHealthMeasurementEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->health_measurement_enabled = $var;

        return $this;
    }

    /**
     * Interval in seconds of how often we should try to send our
     * health metrics to the mesh
     *
     * Generated from protobuf field <code>uint32 health_update_interval = 12;</code>
     * @return int
     */
    public function getHealthUpdateInterval()
    {
        return $this->health_update_interval;
    }

    /**
     * Interval in seconds of how often we should try to send our
     * health metrics to the mesh
     *
     * Generated from protobuf field <code>uint32 health_update_interval = 12;</code>
     * @param int $var
     * @return $this
     */
    public function setHealthUpdateInterval($var)
    {
        GPBUtil::checkUint32($var);
        $this->health_update_interval = $var;

        return $this;
    }

    /**
     * Enable/Disable the health telemetry module on-device display
     *
     * Generated from protobuf field <code>bool health_screen_enabled = 13;</code>
     * @return bool
     */
    public function getHealthScreenEnabled()
    {
        return $this->health_screen_enabled;
    }

    /**
     * Enable/Disable the health telemetry module on-device display
     *
     * Generated from protobuf field <code>bool health_screen_enabled = 13;</code>
     * @param bool $var
     * @return $this
     */
    public function setHealthScreenEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->health_screen_enabled = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(TelemetryConfig::class, \Meshtastic\ModuleConfig_TelemetryConfig::class);

