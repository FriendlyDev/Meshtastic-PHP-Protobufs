<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/module_config.proto

namespace Meshtastic\ModuleConfig;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Detection Sensor Module Config
 *
 * Generated from protobuf message <code>meshtastic.ModuleConfig.DetectionSensorConfig</code>
 */
class DetectionSensorConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * Whether the Module is enabled
     *
     * Generated from protobuf field <code>bool enabled = 1;</code>
     */
    protected $enabled = false;
    /**
     * Interval in seconds of how often we can send a message to the mesh when a state change is detected
     *
     * Generated from protobuf field <code>uint32 minimum_broadcast_secs = 2;</code>
     */
    protected $minimum_broadcast_secs = 0;
    /**
     * Interval in seconds of how often we should send a message to the mesh with the current state regardless of changes
     * When set to 0, only state changes will be broadcasted
     * Works as a sort of status heartbeat for peace of mind
     *
     * Generated from protobuf field <code>uint32 state_broadcast_secs = 3;</code>
     */
    protected $state_broadcast_secs = 0;
    /**
     * Send ASCII bell with alert message
     * Useful for triggering ext. notification on bell
     *
     * Generated from protobuf field <code>bool send_bell = 4;</code>
     */
    protected $send_bell = false;
    /**
     * Friendly name used to format message sent to mesh
     * Example: A name "Motion" would result in a message "Motion detected"
     * Maximum length of 20 characters
     *
     * Generated from protobuf field <code>string name = 5;</code>
     */
    protected $name = '';
    /**
     * GPIO pin to monitor for state changes
     *
     * Generated from protobuf field <code>uint32 monitor_pin = 6;</code>
     */
    protected $monitor_pin = 0;
    /**
     * Whether or not the GPIO pin state detection is triggered on HIGH (1)
     * Otherwise LOW (0)
     *
     * Generated from protobuf field <code>bool detection_triggered_high = 7;</code>
     */
    protected $detection_triggered_high = false;
    /**
     * Whether or not use INPUT_PULLUP mode for GPIO pin
     * Only applicable if the board uses pull-up resistors on the pin
     *
     * Generated from protobuf field <code>bool use_pullup = 8;</code>
     */
    protected $use_pullup = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $enabled
     *           Whether the Module is enabled
     *     @type int $minimum_broadcast_secs
     *           Interval in seconds of how often we can send a message to the mesh when a state change is detected
     *     @type int $state_broadcast_secs
     *           Interval in seconds of how often we should send a message to the mesh with the current state regardless of changes
     *           When set to 0, only state changes will be broadcasted
     *           Works as a sort of status heartbeat for peace of mind
     *     @type bool $send_bell
     *           Send ASCII bell with alert message
     *           Useful for triggering ext. notification on bell
     *     @type string $name
     *           Friendly name used to format message sent to mesh
     *           Example: A name "Motion" would result in a message "Motion detected"
     *           Maximum length of 20 characters
     *     @type int $monitor_pin
     *           GPIO pin to monitor for state changes
     *     @type bool $detection_triggered_high
     *           Whether or not the GPIO pin state detection is triggered on HIGH (1)
     *           Otherwise LOW (0)
     *     @type bool $use_pullup
     *           Whether or not use INPUT_PULLUP mode for GPIO pin
     *           Only applicable if the board uses pull-up resistors on the pin
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Meshtastic\ModuleConfig::initOnce();
        parent::__construct($data);
    }

    /**
     * Whether the Module is enabled
     *
     * Generated from protobuf field <code>bool enabled = 1;</code>
     * @return bool
     */
    public function getEnabled()
    {
        return $this->enabled;
    }

    /**
     * Whether the Module is enabled
     *
     * Generated from protobuf field <code>bool enabled = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->enabled = $var;

        return $this;
    }

    /**
     * Interval in seconds of how often we can send a message to the mesh when a state change is detected
     *
     * Generated from protobuf field <code>uint32 minimum_broadcast_secs = 2;</code>
     * @return int
     */
    public function getMinimumBroadcastSecs()
    {
        return $this->minimum_broadcast_secs;
    }

    /**
     * Interval in seconds of how often we can send a message to the mesh when a state change is detected
     *
     * Generated from protobuf field <code>uint32 minimum_broadcast_secs = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setMinimumBroadcastSecs($var)
    {
        GPBUtil::checkUint32($var);
        $this->minimum_broadcast_secs = $var;

        return $this;
    }

    /**
     * Interval in seconds of how often we should send a message to the mesh with the current state regardless of changes
     * When set to 0, only state changes will be broadcasted
     * Works as a sort of status heartbeat for peace of mind
     *
     * Generated from protobuf field <code>uint32 state_broadcast_secs = 3;</code>
     * @return int
     */
    public function getStateBroadcastSecs()
    {
        return $this->state_broadcast_secs;
    }

    /**
     * Interval in seconds of how often we should send a message to the mesh with the current state regardless of changes
     * When set to 0, only state changes will be broadcasted
     * Works as a sort of status heartbeat for peace of mind
     *
     * Generated from protobuf field <code>uint32 state_broadcast_secs = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setStateBroadcastSecs($var)
    {
        GPBUtil::checkUint32($var);
        $this->state_broadcast_secs = $var;

        return $this;
    }

    /**
     * Send ASCII bell with alert message
     * Useful for triggering ext. notification on bell
     *
     * Generated from protobuf field <code>bool send_bell = 4;</code>
     * @return bool
     */
    public function getSendBell()
    {
        return $this->send_bell;
    }

    /**
     * Send ASCII bell with alert message
     * Useful for triggering ext. notification on bell
     *
     * Generated from protobuf field <code>bool send_bell = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setSendBell($var)
    {
        GPBUtil::checkBool($var);
        $this->send_bell = $var;

        return $this;
    }

    /**
     * Friendly name used to format message sent to mesh
     * Example: A name "Motion" would result in a message "Motion detected"
     * Maximum length of 20 characters
     *
     * Generated from protobuf field <code>string name = 5;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Friendly name used to format message sent to mesh
     * Example: A name "Motion" would result in a message "Motion detected"
     * Maximum length of 20 characters
     *
     * Generated from protobuf field <code>string name = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * GPIO pin to monitor for state changes
     *
     * Generated from protobuf field <code>uint32 monitor_pin = 6;</code>
     * @return int
     */
    public function getMonitorPin()
    {
        return $this->monitor_pin;
    }

    /**
     * GPIO pin to monitor for state changes
     *
     * Generated from protobuf field <code>uint32 monitor_pin = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setMonitorPin($var)
    {
        GPBUtil::checkUint32($var);
        $this->monitor_pin = $var;

        return $this;
    }

    /**
     * Whether or not the GPIO pin state detection is triggered on HIGH (1)
     * Otherwise LOW (0)
     *
     * Generated from protobuf field <code>bool detection_triggered_high = 7;</code>
     * @return bool
     */
    public function getDetectionTriggeredHigh()
    {
        return $this->detection_triggered_high;
    }

    /**
     * Whether or not the GPIO pin state detection is triggered on HIGH (1)
     * Otherwise LOW (0)
     *
     * Generated from protobuf field <code>bool detection_triggered_high = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setDetectionTriggeredHigh($var)
    {
        GPBUtil::checkBool($var);
        $this->detection_triggered_high = $var;

        return $this;
    }

    /**
     * Whether or not use INPUT_PULLUP mode for GPIO pin
     * Only applicable if the board uses pull-up resistors on the pin
     *
     * Generated from protobuf field <code>bool use_pullup = 8;</code>
     * @return bool
     */
    public function getUsePullup()
    {
        return $this->use_pullup;
    }

    /**
     * Whether or not use INPUT_PULLUP mode for GPIO pin
     * Only applicable if the board uses pull-up resistors on the pin
     *
     * Generated from protobuf field <code>bool use_pullup = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setUsePullup($var)
    {
        GPBUtil::checkBool($var);
        $this->use_pullup = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(DetectionSensorConfig::class, \Meshtastic\ModuleConfig_DetectionSensorConfig::class);

