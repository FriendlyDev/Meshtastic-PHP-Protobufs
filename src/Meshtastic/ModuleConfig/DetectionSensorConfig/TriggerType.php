<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/module_config.proto

namespace Meshtastic\ModuleConfig\DetectionSensorConfig;

use UnexpectedValueException;

/**
 * Protobuf type <code>meshtastic.ModuleConfig.DetectionSensorConfig.TriggerType</code>
 */
class TriggerType
{
    /**
     * Event is triggered if pin is low
     *
     * Generated from protobuf enum <code>LOGIC_LOW = 0;</code>
     */
    const LOGIC_LOW = 0;
    /**
     * Event is triggered if pin is high
     *
     * Generated from protobuf enum <code>LOGIC_HIGH = 1;</code>
     */
    const LOGIC_HIGH = 1;
    /**
     * Event is triggered when pin goes high to low
     *
     * Generated from protobuf enum <code>FALLING_EDGE = 2;</code>
     */
    const FALLING_EDGE = 2;
    /**
     * Event is triggered when pin goes low to high
     *
     * Generated from protobuf enum <code>RISING_EDGE = 3;</code>
     */
    const RISING_EDGE = 3;
    /**
     * Event is triggered on every pin state change, low is considered to be
     * "active"
     *
     * Generated from protobuf enum <code>EITHER_EDGE_ACTIVE_LOW = 4;</code>
     */
    const EITHER_EDGE_ACTIVE_LOW = 4;
    /**
     * Event is triggered on every pin state change, high is considered to be
     * "active"
     *
     * Generated from protobuf enum <code>EITHER_EDGE_ACTIVE_HIGH = 5;</code>
     */
    const EITHER_EDGE_ACTIVE_HIGH = 5;

    private static $valueToName = [
        self::LOGIC_LOW => 'LOGIC_LOW',
        self::LOGIC_HIGH => 'LOGIC_HIGH',
        self::FALLING_EDGE => 'FALLING_EDGE',
        self::RISING_EDGE => 'RISING_EDGE',
        self::EITHER_EDGE_ACTIVE_LOW => 'EITHER_EDGE_ACTIVE_LOW',
        self::EITHER_EDGE_ACTIVE_HIGH => 'EITHER_EDGE_ACTIVE_HIGH',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(TriggerType::class, \Meshtastic\ModuleConfig_DetectionSensorConfig_TriggerType::class);

