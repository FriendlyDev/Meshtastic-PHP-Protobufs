<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/module_config.proto

namespace Meshtastic\ModuleConfig;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * MQTT Client Config
 *
 * Generated from protobuf message <code>meshtastic.ModuleConfig.MQTTConfig</code>
 */
class MQTTConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * If a meshtastic node is able to reach the internet it will normally attempt to gateway any channels that are marked as
     * is_uplink_enabled or is_downlink_enabled.
     *
     * Generated from protobuf field <code>bool enabled = 1;</code>
     */
    protected $enabled = false;
    /**
     * The server to use for our MQTT global message gateway feature.
     * If not set, the default server will be used
     *
     * Generated from protobuf field <code>string address = 2;</code>
     */
    protected $address = '';
    /**
     * MQTT username to use (most useful for a custom MQTT server).
     * If using a custom server, this will be honoured even if empty.
     * If using the default server, this will only be honoured if set, otherwise the device will use the default username
     *
     * Generated from protobuf field <code>string username = 3;</code>
     */
    protected $username = '';
    /**
     * MQTT password to use (most useful for a custom MQTT server).
     * If using a custom server, this will be honoured even if empty.
     * If using the default server, this will only be honoured if set, otherwise the device will use the default password
     *
     * Generated from protobuf field <code>string password = 4;</code>
     */
    protected $password = '';
    /**
     * Whether to send encrypted or decrypted packets to MQTT.
     * This parameter is only honoured if you also set server
     * (the default official mqtt.meshtastic.org server can handle encrypted packets)
     * Decrypted packets may be useful for external systems that want to consume meshtastic packets
     *
     * Generated from protobuf field <code>bool encryption_enabled = 5;</code>
     */
    protected $encryption_enabled = false;
    /**
     * Whether to send / consume json packets on MQTT
     *
     * Generated from protobuf field <code>bool json_enabled = 6;</code>
     */
    protected $json_enabled = false;
    /**
     * If true, we attempt to establish a secure connection using TLS
     *
     * Generated from protobuf field <code>bool tls_enabled = 7;</code>
     */
    protected $tls_enabled = false;
    /**
     * The root topic to use for MQTT messages. Default is "msh".
     * This is useful if you want to use a single MQTT server for multiple meshtastic networks and separate them via ACLs
     *
     * Generated from protobuf field <code>string root = 8;</code>
     */
    protected $root = '';
    /**
     * If true, we can use the connected phone / client to proxy messages to MQTT instead of a direct connection
     *
     * Generated from protobuf field <code>bool proxy_to_client_enabled = 9;</code>
     */
    protected $proxy_to_client_enabled = false;
    /**
     * If true, we will periodically report unencrypted information about our node to a map via MQTT
     *
     * Generated from protobuf field <code>bool map_reporting_enabled = 10;</code>
     */
    protected $map_reporting_enabled = false;
    /**
     * Settings for reporting information about our node to a map via MQTT
     *
     * Generated from protobuf field <code>.meshtastic.ModuleConfig.MapReportSettings map_report_settings = 11;</code>
     */
    protected $map_report_settings = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $enabled
     *           If a meshtastic node is able to reach the internet it will normally attempt to gateway any channels that are marked as
     *           is_uplink_enabled or is_downlink_enabled.
     *     @type string $address
     *           The server to use for our MQTT global message gateway feature.
     *           If not set, the default server will be used
     *     @type string $username
     *           MQTT username to use (most useful for a custom MQTT server).
     *           If using a custom server, this will be honoured even if empty.
     *           If using the default server, this will only be honoured if set, otherwise the device will use the default username
     *     @type string $password
     *           MQTT password to use (most useful for a custom MQTT server).
     *           If using a custom server, this will be honoured even if empty.
     *           If using the default server, this will only be honoured if set, otherwise the device will use the default password
     *     @type bool $encryption_enabled
     *           Whether to send encrypted or decrypted packets to MQTT.
     *           This parameter is only honoured if you also set server
     *           (the default official mqtt.meshtastic.org server can handle encrypted packets)
     *           Decrypted packets may be useful for external systems that want to consume meshtastic packets
     *     @type bool $json_enabled
     *           Whether to send / consume json packets on MQTT
     *     @type bool $tls_enabled
     *           If true, we attempt to establish a secure connection using TLS
     *     @type string $root
     *           The root topic to use for MQTT messages. Default is "msh".
     *           This is useful if you want to use a single MQTT server for multiple meshtastic networks and separate them via ACLs
     *     @type bool $proxy_to_client_enabled
     *           If true, we can use the connected phone / client to proxy messages to MQTT instead of a direct connection
     *     @type bool $map_reporting_enabled
     *           If true, we will periodically report unencrypted information about our node to a map via MQTT
     *     @type \Meshtastic\ModuleConfig\MapReportSettings $map_report_settings
     *           Settings for reporting information about our node to a map via MQTT
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Meshtastic\ModuleConfig::initOnce();
        parent::__construct($data);
    }

    /**
     * If a meshtastic node is able to reach the internet it will normally attempt to gateway any channels that are marked as
     * is_uplink_enabled or is_downlink_enabled.
     *
     * Generated from protobuf field <code>bool enabled = 1;</code>
     * @return bool
     */
    public function getEnabled()
    {
        return $this->enabled;
    }

    /**
     * If a meshtastic node is able to reach the internet it will normally attempt to gateway any channels that are marked as
     * is_uplink_enabled or is_downlink_enabled.
     *
     * Generated from protobuf field <code>bool enabled = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->enabled = $var;

        return $this;
    }

    /**
     * The server to use for our MQTT global message gateway feature.
     * If not set, the default server will be used
     *
     * Generated from protobuf field <code>string address = 2;</code>
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * The server to use for our MQTT global message gateway feature.
     * If not set, the default server will be used
     *
     * Generated from protobuf field <code>string address = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setAddress($var)
    {
        GPBUtil::checkString($var, True);
        $this->address = $var;

        return $this;
    }

    /**
     * MQTT username to use (most useful for a custom MQTT server).
     * If using a custom server, this will be honoured even if empty.
     * If using the default server, this will only be honoured if set, otherwise the device will use the default username
     *
     * Generated from protobuf field <code>string username = 3;</code>
     * @return string
     */
    public function getUsername()
    {
        return $this->username;
    }

    /**
     * MQTT username to use (most useful for a custom MQTT server).
     * If using a custom server, this will be honoured even if empty.
     * If using the default server, this will only be honoured if set, otherwise the device will use the default username
     *
     * Generated from protobuf field <code>string username = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setUsername($var)
    {
        GPBUtil::checkString($var, True);
        $this->username = $var;

        return $this;
    }

    /**
     * MQTT password to use (most useful for a custom MQTT server).
     * If using a custom server, this will be honoured even if empty.
     * If using the default server, this will only be honoured if set, otherwise the device will use the default password
     *
     * Generated from protobuf field <code>string password = 4;</code>
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * MQTT password to use (most useful for a custom MQTT server).
     * If using a custom server, this will be honoured even if empty.
     * If using the default server, this will only be honoured if set, otherwise the device will use the default password
     *
     * Generated from protobuf field <code>string password = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setPassword($var)
    {
        GPBUtil::checkString($var, True);
        $this->password = $var;

        return $this;
    }

    /**
     * Whether to send encrypted or decrypted packets to MQTT.
     * This parameter is only honoured if you also set server
     * (the default official mqtt.meshtastic.org server can handle encrypted packets)
     * Decrypted packets may be useful for external systems that want to consume meshtastic packets
     *
     * Generated from protobuf field <code>bool encryption_enabled = 5;</code>
     * @return bool
     */
    public function getEncryptionEnabled()
    {
        return $this->encryption_enabled;
    }

    /**
     * Whether to send encrypted or decrypted packets to MQTT.
     * This parameter is only honoured if you also set server
     * (the default official mqtt.meshtastic.org server can handle encrypted packets)
     * Decrypted packets may be useful for external systems that want to consume meshtastic packets
     *
     * Generated from protobuf field <code>bool encryption_enabled = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setEncryptionEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->encryption_enabled = $var;

        return $this;
    }

    /**
     * Whether to send / consume json packets on MQTT
     *
     * Generated from protobuf field <code>bool json_enabled = 6;</code>
     * @return bool
     */
    public function getJsonEnabled()
    {
        return $this->json_enabled;
    }

    /**
     * Whether to send / consume json packets on MQTT
     *
     * Generated from protobuf field <code>bool json_enabled = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setJsonEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->json_enabled = $var;

        return $this;
    }

    /**
     * If true, we attempt to establish a secure connection using TLS
     *
     * Generated from protobuf field <code>bool tls_enabled = 7;</code>
     * @return bool
     */
    public function getTlsEnabled()
    {
        return $this->tls_enabled;
    }

    /**
     * If true, we attempt to establish a secure connection using TLS
     *
     * Generated from protobuf field <code>bool tls_enabled = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setTlsEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->tls_enabled = $var;

        return $this;
    }

    /**
     * The root topic to use for MQTT messages. Default is "msh".
     * This is useful if you want to use a single MQTT server for multiple meshtastic networks and separate them via ACLs
     *
     * Generated from protobuf field <code>string root = 8;</code>
     * @return string
     */
    public function getRoot()
    {
        return $this->root;
    }

    /**
     * The root topic to use for MQTT messages. Default is "msh".
     * This is useful if you want to use a single MQTT server for multiple meshtastic networks and separate them via ACLs
     *
     * Generated from protobuf field <code>string root = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setRoot($var)
    {
        GPBUtil::checkString($var, True);
        $this->root = $var;

        return $this;
    }

    /**
     * If true, we can use the connected phone / client to proxy messages to MQTT instead of a direct connection
     *
     * Generated from protobuf field <code>bool proxy_to_client_enabled = 9;</code>
     * @return bool
     */
    public function getProxyToClientEnabled()
    {
        return $this->proxy_to_client_enabled;
    }

    /**
     * If true, we can use the connected phone / client to proxy messages to MQTT instead of a direct connection
     *
     * Generated from protobuf field <code>bool proxy_to_client_enabled = 9;</code>
     * @param bool $var
     * @return $this
     */
    public function setProxyToClientEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->proxy_to_client_enabled = $var;

        return $this;
    }

    /**
     * If true, we will periodically report unencrypted information about our node to a map via MQTT
     *
     * Generated from protobuf field <code>bool map_reporting_enabled = 10;</code>
     * @return bool
     */
    public function getMapReportingEnabled()
    {
        return $this->map_reporting_enabled;
    }

    /**
     * If true, we will periodically report unencrypted information about our node to a map via MQTT
     *
     * Generated from protobuf field <code>bool map_reporting_enabled = 10;</code>
     * @param bool $var
     * @return $this
     */
    public function setMapReportingEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->map_reporting_enabled = $var;

        return $this;
    }

    /**
     * Settings for reporting information about our node to a map via MQTT
     *
     * Generated from protobuf field <code>.meshtastic.ModuleConfig.MapReportSettings map_report_settings = 11;</code>
     * @return \Meshtastic\ModuleConfig\MapReportSettings|null
     */
    public function getMapReportSettings()
    {
        return $this->map_report_settings;
    }

    public function hasMapReportSettings()
    {
        return isset($this->map_report_settings);
    }

    public function clearMapReportSettings()
    {
        unset($this->map_report_settings);
    }

    /**
     * Settings for reporting information about our node to a map via MQTT
     *
     * Generated from protobuf field <code>.meshtastic.ModuleConfig.MapReportSettings map_report_settings = 11;</code>
     * @param \Meshtastic\ModuleConfig\MapReportSettings $var
     * @return $this
     */
    public function setMapReportSettings($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\ModuleConfig\MapReportSettings::class);
        $this->map_report_settings = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(MQTTConfig::class, \Meshtastic\ModuleConfig_MQTTConfig::class);

