<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/module_config.proto

namespace Meshtastic\ModuleConfig;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * RemoteHardwareModule Config
 *
 * Generated from protobuf message <code>meshtastic.ModuleConfig.RemoteHardwareConfig</code>
 */
class RemoteHardwareConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * Whether the Module is enabled
     *
     * Generated from protobuf field <code>bool enabled = 1;</code>
     */
    protected $enabled = false;
    /**
     * Whether the Module allows consumers to read / write to pins not defined in available_pins
     *
     * Generated from protobuf field <code>bool allow_undefined_pin_access = 2;</code>
     */
    protected $allow_undefined_pin_access = false;
    /**
     * Exposes the available pins to the mesh for reading and writing
     *
     * Generated from protobuf field <code>repeated .meshtastic.RemoteHardwarePin available_pins = 3;</code>
     */
    private $available_pins;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $enabled
     *           Whether the Module is enabled
     *     @type bool $allow_undefined_pin_access
     *           Whether the Module allows consumers to read / write to pins not defined in available_pins
     *     @type array<\Meshtastic\RemoteHardwarePin>|\Google\Protobuf\Internal\RepeatedField $available_pins
     *           Exposes the available pins to the mesh for reading and writing
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Meshtastic\ModuleConfig::initOnce();
        parent::__construct($data);
    }

    /**
     * Whether the Module is enabled
     *
     * Generated from protobuf field <code>bool enabled = 1;</code>
     * @return bool
     */
    public function getEnabled()
    {
        return $this->enabled;
    }

    /**
     * Whether the Module is enabled
     *
     * Generated from protobuf field <code>bool enabled = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->enabled = $var;

        return $this;
    }

    /**
     * Whether the Module allows consumers to read / write to pins not defined in available_pins
     *
     * Generated from protobuf field <code>bool allow_undefined_pin_access = 2;</code>
     * @return bool
     */
    public function getAllowUndefinedPinAccess()
    {
        return $this->allow_undefined_pin_access;
    }

    /**
     * Whether the Module allows consumers to read / write to pins not defined in available_pins
     *
     * Generated from protobuf field <code>bool allow_undefined_pin_access = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setAllowUndefinedPinAccess($var)
    {
        GPBUtil::checkBool($var);
        $this->allow_undefined_pin_access = $var;

        return $this;
    }

    /**
     * Exposes the available pins to the mesh for reading and writing
     *
     * Generated from protobuf field <code>repeated .meshtastic.RemoteHardwarePin available_pins = 3;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getAvailablePins()
    {
        return $this->available_pins;
    }

    /**
     * Exposes the available pins to the mesh for reading and writing
     *
     * Generated from protobuf field <code>repeated .meshtastic.RemoteHardwarePin available_pins = 3;</code>
     * @param array<\Meshtastic\RemoteHardwarePin>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setAvailablePins($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Meshtastic\RemoteHardwarePin::class);
        $this->available_pins = $arr;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(RemoteHardwareConfig::class, \Meshtastic\ModuleConfig_RemoteHardwareConfig::class);

