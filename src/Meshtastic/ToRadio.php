<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/mesh.proto

namespace Meshtastic;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Packets/commands to the radio will be written (reliably) to the toRadio characteristic.
 * Once the write completes the phone can assume it is handled.
 *
 * Generated from protobuf message <code>meshtastic.ToRadio</code>
 */
class ToRadio extends \Google\Protobuf\Internal\Message
{
    protected $payload_variant;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Meshtastic\MeshPacket $packet
     *           Send this packet on the mesh
     *     @type int $want_config_id
     *           Phone wants radio to send full node db to the phone, This is
     *           typically the first packet sent to the radio when the phone gets a
     *           bluetooth connection. The radio will respond by sending back a
     *           MyNodeInfo, a owner, a radio config and a series of
     *           FromRadio.node_infos, and config_complete
     *           the integer you write into this field will be reported back in the
     *           config_complete_id response this allows clients to never be confused by
     *           a stale old partially sent config.
     *     @type bool $disconnect
     *           Tell API server we are disconnecting now.
     *           This is useful for serial links where there is no hardware/protocol based notification that the client has dropped the link.
     *           (Sending this message is optional for clients)
     *     @type \Meshtastic\XModem $xmodemPacket
     *     @type \Meshtastic\MqttClientProxyMessage $mqttClientProxyMessage
     *           MQTT Client Proxy Message (for client / phone subscribed to MQTT sending to device)
     *     @type \Meshtastic\Heartbeat $heartbeat
     *           Heartbeat message (used to keep the device connection awake on serial)
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Meshtastic\Mesh::initOnce();
        parent::__construct($data);
    }

    /**
     * Send this packet on the mesh
     *
     * Generated from protobuf field <code>.meshtastic.MeshPacket packet = 1;</code>
     * @return \Meshtastic\MeshPacket|null
     */
    public function getPacket()
    {
        return $this->readOneof(1);
    }

    public function hasPacket()
    {
        return $this->hasOneof(1);
    }

    /**
     * Send this packet on the mesh
     *
     * Generated from protobuf field <code>.meshtastic.MeshPacket packet = 1;</code>
     * @param \Meshtastic\MeshPacket $var
     * @return $this
     */
    public function setPacket($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\MeshPacket::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Phone wants radio to send full node db to the phone, This is
     * typically the first packet sent to the radio when the phone gets a
     * bluetooth connection. The radio will respond by sending back a
     * MyNodeInfo, a owner, a radio config and a series of
     * FromRadio.node_infos, and config_complete
     * the integer you write into this field will be reported back in the
     * config_complete_id response this allows clients to never be confused by
     * a stale old partially sent config.
     *
     * Generated from protobuf field <code>uint32 want_config_id = 3;</code>
     * @return int
     */
    public function getWantConfigId()
    {
        return $this->readOneof(3);
    }

    public function hasWantConfigId()
    {
        return $this->hasOneof(3);
    }

    /**
     * Phone wants radio to send full node db to the phone, This is
     * typically the first packet sent to the radio when the phone gets a
     * bluetooth connection. The radio will respond by sending back a
     * MyNodeInfo, a owner, a radio config and a series of
     * FromRadio.node_infos, and config_complete
     * the integer you write into this field will be reported back in the
     * config_complete_id response this allows clients to never be confused by
     * a stale old partially sent config.
     *
     * Generated from protobuf field <code>uint32 want_config_id = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setWantConfigId($var)
    {
        GPBUtil::checkUint32($var);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Tell API server we are disconnecting now.
     * This is useful for serial links where there is no hardware/protocol based notification that the client has dropped the link.
     * (Sending this message is optional for clients)
     *
     * Generated from protobuf field <code>bool disconnect = 4;</code>
     * @return bool
     */
    public function getDisconnect()
    {
        return $this->readOneof(4);
    }

    public function hasDisconnect()
    {
        return $this->hasOneof(4);
    }

    /**
     * Tell API server we are disconnecting now.
     * This is useful for serial links where there is no hardware/protocol based notification that the client has dropped the link.
     * (Sending this message is optional for clients)
     *
     * Generated from protobuf field <code>bool disconnect = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setDisconnect($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.meshtastic.XModem xmodemPacket = 5;</code>
     * @return \Meshtastic\XModem|null
     */
    public function getXmodemPacket()
    {
        return $this->readOneof(5);
    }

    public function hasXmodemPacket()
    {
        return $this->hasOneof(5);
    }

    /**
     * Generated from protobuf field <code>.meshtastic.XModem xmodemPacket = 5;</code>
     * @param \Meshtastic\XModem $var
     * @return $this
     */
    public function setXmodemPacket($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\XModem::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * MQTT Client Proxy Message (for client / phone subscribed to MQTT sending to device)
     *
     * Generated from protobuf field <code>.meshtastic.MqttClientProxyMessage mqttClientProxyMessage = 6;</code>
     * @return \Meshtastic\MqttClientProxyMessage|null
     */
    public function getMqttClientProxyMessage()
    {
        return $this->readOneof(6);
    }

    public function hasMqttClientProxyMessage()
    {
        return $this->hasOneof(6);
    }

    /**
     * MQTT Client Proxy Message (for client / phone subscribed to MQTT sending to device)
     *
     * Generated from protobuf field <code>.meshtastic.MqttClientProxyMessage mqttClientProxyMessage = 6;</code>
     * @param \Meshtastic\MqttClientProxyMessage $var
     * @return $this
     */
    public function setMqttClientProxyMessage($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\MqttClientProxyMessage::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * Heartbeat message (used to keep the device connection awake on serial)
     *
     * Generated from protobuf field <code>.meshtastic.Heartbeat heartbeat = 7;</code>
     * @return \Meshtastic\Heartbeat|null
     */
    public function getHeartbeat()
    {
        return $this->readOneof(7);
    }

    public function hasHeartbeat()
    {
        return $this->hasOneof(7);
    }

    /**
     * Heartbeat message (used to keep the device connection awake on serial)
     *
     * Generated from protobuf field <code>.meshtastic.Heartbeat heartbeat = 7;</code>
     * @param \Meshtastic\Heartbeat $var
     * @return $this
     */
    public function setHeartbeat($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\Heartbeat::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getPayloadVariant()
    {
        return $this->whichOneof("payload_variant");
    }

}

