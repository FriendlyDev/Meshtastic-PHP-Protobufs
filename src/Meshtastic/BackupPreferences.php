<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/deviceonly.proto

namespace Meshtastic;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The on-disk backup of the node's preferences
 *
 * Generated from protobuf message <code>meshtastic.BackupPreferences</code>
 */
class BackupPreferences extends \Google\Protobuf\Internal\Message
{
    /**
     * The version of the backup
     *
     * Generated from protobuf field <code>uint32 version = 1;</code>
     */
    protected $version = 0;
    /**
     * The timestamp of the backup (if node has time)
     *
     * Generated from protobuf field <code>fixed32 timestamp = 2;</code>
     */
    protected $timestamp = 0;
    /**
     * The node's configuration
     *
     * Generated from protobuf field <code>.meshtastic.LocalConfig config = 3;</code>
     */
    protected $config = null;
    /**
     * The node's module configuration
     *
     * Generated from protobuf field <code>.meshtastic.LocalModuleConfig module_config = 4;</code>
     */
    protected $module_config = null;
    /**
     * The node's channels
     *
     * Generated from protobuf field <code>.meshtastic.ChannelFile channels = 5;</code>
     */
    protected $channels = null;
    /**
     * The node's user (owner) information
     *
     * Generated from protobuf field <code>.meshtastic.User owner = 6;</code>
     */
    protected $owner = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $version
     *           The version of the backup
     *     @type int $timestamp
     *           The timestamp of the backup (if node has time)
     *     @type \Meshtastic\LocalConfig $config
     *           The node's configuration
     *     @type \Meshtastic\LocalModuleConfig $module_config
     *           The node's module configuration
     *     @type \Meshtastic\ChannelFile $channels
     *           The node's channels
     *     @type \Meshtastic\User $owner
     *           The node's user (owner) information
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Meshtastic\Deviceonly::initOnce();
        parent::__construct($data);
    }

    /**
     * The version of the backup
     *
     * Generated from protobuf field <code>uint32 version = 1;</code>
     * @return int
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * The version of the backup
     *
     * Generated from protobuf field <code>uint32 version = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setVersion($var)
    {
        GPBUtil::checkUint32($var);
        $this->version = $var;

        return $this;
    }

    /**
     * The timestamp of the backup (if node has time)
     *
     * Generated from protobuf field <code>fixed32 timestamp = 2;</code>
     * @return int
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * The timestamp of the backup (if node has time)
     *
     * Generated from protobuf field <code>fixed32 timestamp = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkUint32($var);
        $this->timestamp = $var;

        return $this;
    }

    /**
     * The node's configuration
     *
     * Generated from protobuf field <code>.meshtastic.LocalConfig config = 3;</code>
     * @return \Meshtastic\LocalConfig|null
     */
    public function getConfig()
    {
        return $this->config;
    }

    public function hasConfig()
    {
        return isset($this->config);
    }

    public function clearConfig()
    {
        unset($this->config);
    }

    /**
     * The node's configuration
     *
     * Generated from protobuf field <code>.meshtastic.LocalConfig config = 3;</code>
     * @param \Meshtastic\LocalConfig $var
     * @return $this
     */
    public function setConfig($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\LocalConfig::class);
        $this->config = $var;

        return $this;
    }

    /**
     * The node's module configuration
     *
     * Generated from protobuf field <code>.meshtastic.LocalModuleConfig module_config = 4;</code>
     * @return \Meshtastic\LocalModuleConfig|null
     */
    public function getModuleConfig()
    {
        return $this->module_config;
    }

    public function hasModuleConfig()
    {
        return isset($this->module_config);
    }

    public function clearModuleConfig()
    {
        unset($this->module_config);
    }

    /**
     * The node's module configuration
     *
     * Generated from protobuf field <code>.meshtastic.LocalModuleConfig module_config = 4;</code>
     * @param \Meshtastic\LocalModuleConfig $var
     * @return $this
     */
    public function setModuleConfig($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\LocalModuleConfig::class);
        $this->module_config = $var;

        return $this;
    }

    /**
     * The node's channels
     *
     * Generated from protobuf field <code>.meshtastic.ChannelFile channels = 5;</code>
     * @return \Meshtastic\ChannelFile|null
     */
    public function getChannels()
    {
        return $this->channels;
    }

    public function hasChannels()
    {
        return isset($this->channels);
    }

    public function clearChannels()
    {
        unset($this->channels);
    }

    /**
     * The node's channels
     *
     * Generated from protobuf field <code>.meshtastic.ChannelFile channels = 5;</code>
     * @param \Meshtastic\ChannelFile $var
     * @return $this
     */
    public function setChannels($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\ChannelFile::class);
        $this->channels = $var;

        return $this;
    }

    /**
     * The node's user (owner) information
     *
     * Generated from protobuf field <code>.meshtastic.User owner = 6;</code>
     * @return \Meshtastic\User|null
     */
    public function getOwner()
    {
        return $this->owner;
    }

    public function hasOwner()
    {
        return isset($this->owner);
    }

    public function clearOwner()
    {
        unset($this->owner);
    }

    /**
     * The node's user (owner) information
     *
     * Generated from protobuf field <code>.meshtastic.User owner = 6;</code>
     * @param \Meshtastic\User $var
     * @return $this
     */
    public function setOwner($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\User::class);
        $this->owner = $var;

        return $this;
    }

}

