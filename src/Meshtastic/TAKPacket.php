<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/atak.proto

namespace Meshtastic;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Packets for the official ATAK Plugin 
 *
 * Generated from protobuf message <code>meshtastic.TAKPacket</code>
 */
class TAKPacket extends \Google\Protobuf\Internal\Message
{
    /**
     * Are the payloads strings compressed for LoRA transport?
     *
     * Generated from protobuf field <code>bool is_compressed = 1;</code>
     */
    protected $is_compressed = false;
    /**
     * The contact / callsign for ATAK user
     *
     * Generated from protobuf field <code>.meshtastic.Contact contact = 2;</code>
     */
    protected $contact = null;
    /**
     * The group for ATAK user
     *
     * Generated from protobuf field <code>.meshtastic.Group group = 3;</code>
     */
    protected $group = null;
    /**
     * The status of the ATAK EUD
     *
     * Generated from protobuf field <code>.meshtastic.Status status = 4;</code>
     */
    protected $status = null;
    protected $payload_variant;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $is_compressed
     *           Are the payloads strings compressed for LoRA transport?
     *     @type \Meshtastic\Contact $contact
     *           The contact / callsign for ATAK user
     *     @type \Meshtastic\Group $group
     *           The group for ATAK user
     *     @type \Meshtastic\Status $status
     *           The status of the ATAK EUD
     *     @type \Meshtastic\PLI $pli
     *           TAK position report
     *     @type \Meshtastic\GeoChat $chat
     *           ATAK GeoChat message
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Meshtastic\Atak::initOnce();
        parent::__construct($data);
    }

    /**
     * Are the payloads strings compressed for LoRA transport?
     *
     * Generated from protobuf field <code>bool is_compressed = 1;</code>
     * @return bool
     */
    public function getIsCompressed()
    {
        return $this->is_compressed;
    }

    /**
     * Are the payloads strings compressed for LoRA transport?
     *
     * Generated from protobuf field <code>bool is_compressed = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsCompressed($var)
    {
        GPBUtil::checkBool($var);
        $this->is_compressed = $var;

        return $this;
    }

    /**
     * The contact / callsign for ATAK user
     *
     * Generated from protobuf field <code>.meshtastic.Contact contact = 2;</code>
     * @return \Meshtastic\Contact|null
     */
    public function getContact()
    {
        return $this->contact;
    }

    public function hasContact()
    {
        return isset($this->contact);
    }

    public function clearContact()
    {
        unset($this->contact);
    }

    /**
     * The contact / callsign for ATAK user
     *
     * Generated from protobuf field <code>.meshtastic.Contact contact = 2;</code>
     * @param \Meshtastic\Contact $var
     * @return $this
     */
    public function setContact($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\Contact::class);
        $this->contact = $var;

        return $this;
    }

    /**
     * The group for ATAK user
     *
     * Generated from protobuf field <code>.meshtastic.Group group = 3;</code>
     * @return \Meshtastic\Group|null
     */
    public function getGroup()
    {
        return $this->group;
    }

    public function hasGroup()
    {
        return isset($this->group);
    }

    public function clearGroup()
    {
        unset($this->group);
    }

    /**
     * The group for ATAK user
     *
     * Generated from protobuf field <code>.meshtastic.Group group = 3;</code>
     * @param \Meshtastic\Group $var
     * @return $this
     */
    public function setGroup($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\Group::class);
        $this->group = $var;

        return $this;
    }

    /**
     * The status of the ATAK EUD
     *
     * Generated from protobuf field <code>.meshtastic.Status status = 4;</code>
     * @return \Meshtastic\Status|null
     */
    public function getStatus()
    {
        return $this->status;
    }

    public function hasStatus()
    {
        return isset($this->status);
    }

    public function clearStatus()
    {
        unset($this->status);
    }

    /**
     * The status of the ATAK EUD
     *
     * Generated from protobuf field <code>.meshtastic.Status status = 4;</code>
     * @param \Meshtastic\Status $var
     * @return $this
     */
    public function setStatus($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\Status::class);
        $this->status = $var;

        return $this;
    }

    /**
     * TAK position report
     *
     * Generated from protobuf field <code>.meshtastic.PLI pli = 5;</code>
     * @return \Meshtastic\PLI|null
     */
    public function getPli()
    {
        return $this->readOneof(5);
    }

    public function hasPli()
    {
        return $this->hasOneof(5);
    }

    /**
     * TAK position report
     *
     * Generated from protobuf field <code>.meshtastic.PLI pli = 5;</code>
     * @param \Meshtastic\PLI $var
     * @return $this
     */
    public function setPli($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\PLI::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * ATAK GeoChat message
     *
     * Generated from protobuf field <code>.meshtastic.GeoChat chat = 6;</code>
     * @return \Meshtastic\GeoChat|null
     */
    public function getChat()
    {
        return $this->readOneof(6);
    }

    public function hasChat()
    {
        return $this->hasOneof(6);
    }

    /**
     * ATAK GeoChat message
     *
     * Generated from protobuf field <code>.meshtastic.GeoChat chat = 6;</code>
     * @param \Meshtastic\GeoChat $var
     * @return $this
     */
    public function setChat($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\GeoChat::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getPayloadVariant()
    {
        return $this->whichOneof("payload_variant");
    }

}

