<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/telemetry.proto

namespace Meshtastic;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Key native device metrics such as battery level
 *
 * Generated from protobuf message <code>meshtastic.DeviceMetrics</code>
 */
class DeviceMetrics extends \Google\Protobuf\Internal\Message
{
    /**
     * 0-100 (>100 means powered)
     *
     * Generated from protobuf field <code>optional uint32 battery_level = 1;</code>
     */
    protected $battery_level = null;
    /**
     * Voltage measured
     *
     * Generated from protobuf field <code>optional float voltage = 2;</code>
     */
    protected $voltage = null;
    /**
     * Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
     *
     * Generated from protobuf field <code>optional float channel_utilization = 3;</code>
     */
    protected $channel_utilization = null;
    /**
     * Percent of airtime for transmission used within the last hour.
     *
     * Generated from protobuf field <code>optional float air_util_tx = 4;</code>
     */
    protected $air_util_tx = null;
    /**
     * How long the device has been running since the last reboot (in seconds)
     *
     * Generated from protobuf field <code>optional uint32 uptime_seconds = 5;</code>
     */
    protected $uptime_seconds = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $battery_level
     *           0-100 (>100 means powered)
     *     @type float $voltage
     *           Voltage measured
     *     @type float $channel_utilization
     *           Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
     *     @type float $air_util_tx
     *           Percent of airtime for transmission used within the last hour.
     *     @type int $uptime_seconds
     *           How long the device has been running since the last reboot (in seconds)
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Meshtastic\Telemetry::initOnce();
        parent::__construct($data);
    }

    /**
     * 0-100 (>100 means powered)
     *
     * Generated from protobuf field <code>optional uint32 battery_level = 1;</code>
     * @return int
     */
    public function getBatteryLevel()
    {
        return isset($this->battery_level) ? $this->battery_level : 0;
    }

    public function hasBatteryLevel()
    {
        return isset($this->battery_level);
    }

    public function clearBatteryLevel()
    {
        unset($this->battery_level);
    }

    /**
     * 0-100 (>100 means powered)
     *
     * Generated from protobuf field <code>optional uint32 battery_level = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setBatteryLevel($var)
    {
        GPBUtil::checkUint32($var);
        $this->battery_level = $var;

        return $this;
    }

    /**
     * Voltage measured
     *
     * Generated from protobuf field <code>optional float voltage = 2;</code>
     * @return float
     */
    public function getVoltage()
    {
        return isset($this->voltage) ? $this->voltage : 0.0;
    }

    public function hasVoltage()
    {
        return isset($this->voltage);
    }

    public function clearVoltage()
    {
        unset($this->voltage);
    }

    /**
     * Voltage measured
     *
     * Generated from protobuf field <code>optional float voltage = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setVoltage($var)
    {
        GPBUtil::checkFloat($var);
        $this->voltage = $var;

        return $this;
    }

    /**
     * Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
     *
     * Generated from protobuf field <code>optional float channel_utilization = 3;</code>
     * @return float
     */
    public function getChannelUtilization()
    {
        return isset($this->channel_utilization) ? $this->channel_utilization : 0.0;
    }

    public function hasChannelUtilization()
    {
        return isset($this->channel_utilization);
    }

    public function clearChannelUtilization()
    {
        unset($this->channel_utilization);
    }

    /**
     * Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
     *
     * Generated from protobuf field <code>optional float channel_utilization = 3;</code>
     * @param float $var
     * @return $this
     */
    public function setChannelUtilization($var)
    {
        GPBUtil::checkFloat($var);
        $this->channel_utilization = $var;

        return $this;
    }

    /**
     * Percent of airtime for transmission used within the last hour.
     *
     * Generated from protobuf field <code>optional float air_util_tx = 4;</code>
     * @return float
     */
    public function getAirUtilTx()
    {
        return isset($this->air_util_tx) ? $this->air_util_tx : 0.0;
    }

    public function hasAirUtilTx()
    {
        return isset($this->air_util_tx);
    }

    public function clearAirUtilTx()
    {
        unset($this->air_util_tx);
    }

    /**
     * Percent of airtime for transmission used within the last hour.
     *
     * Generated from protobuf field <code>optional float air_util_tx = 4;</code>
     * @param float $var
     * @return $this
     */
    public function setAirUtilTx($var)
    {
        GPBUtil::checkFloat($var);
        $this->air_util_tx = $var;

        return $this;
    }

    /**
     * How long the device has been running since the last reboot (in seconds)
     *
     * Generated from protobuf field <code>optional uint32 uptime_seconds = 5;</code>
     * @return int
     */
    public function getUptimeSeconds()
    {
        return isset($this->uptime_seconds) ? $this->uptime_seconds : 0;
    }

    public function hasUptimeSeconds()
    {
        return isset($this->uptime_seconds);
    }

    public function clearUptimeSeconds()
    {
        unset($this->uptime_seconds);
    }

    /**
     * How long the device has been running since the last reboot (in seconds)
     *
     * Generated from protobuf field <code>optional uint32 uptime_seconds = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setUptimeSeconds($var)
    {
        GPBUtil::checkUint32($var);
        $this->uptime_seconds = $var;

        return $this;
    }

}

