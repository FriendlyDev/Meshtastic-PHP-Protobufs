<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/mesh.proto

namespace Meshtastic;

use UnexpectedValueException;

/**
 * Enum to indicate to clients whether this firmware is a special firmware build, like an event.
 * The first 16 values are reserved for non-event special firmwares, like the Smart Citizen use case.
 *
 * Protobuf type <code>meshtastic.FirmwareEdition</code>
 */
class FirmwareEdition
{
    /**
     * Vanilla firmware
     *
     * Generated from protobuf enum <code>VANILLA = 0;</code>
     */
    const VANILLA = 0;
    /**
     * Firmware for use in the Smart Citizen environmental monitoring network
     *
     * Generated from protobuf enum <code>SMART_CITIZEN = 1;</code>
     */
    const SMART_CITIZEN = 1;
    /**
     * Open Sauce, the maker conference held yearly in CA
     *
     * Generated from protobuf enum <code>OPEN_SAUCE = 16;</code>
     */
    const OPEN_SAUCE = 16;
    /**
     * DEFCON, the yearly hacker conference
     *
     * Generated from protobuf enum <code>DEFCON = 17;</code>
     */
    const DEFCON = 17;
    /**
     * Burning Man, the yearly hippie gathering in the desert
     *
     * Generated from protobuf enum <code>BURNING_MAN = 18;</code>
     */
    const BURNING_MAN = 18;
    /**
     * Hamvention, the Dayton amateur radio convention
     *
     * Generated from protobuf enum <code>HAMVENTION = 19;</code>
     */
    const HAMVENTION = 19;
    /**
     * Placeholder for DIY and unofficial events
     *
     * Generated from protobuf enum <code>DIY_EDITION = 127;</code>
     */
    const DIY_EDITION = 127;

    private static $valueToName = [
        self::VANILLA => 'VANILLA',
        self::SMART_CITIZEN => 'SMART_CITIZEN',
        self::OPEN_SAUCE => 'OPEN_SAUCE',
        self::DEFCON => 'DEFCON',
        self::BURNING_MAN => 'BURNING_MAN',
        self::HAMVENTION => 'HAMVENTION',
        self::DIY_EDITION => 'DIY_EDITION',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

