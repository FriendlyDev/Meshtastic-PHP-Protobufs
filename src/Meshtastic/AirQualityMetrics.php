<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/telemetry.proto

namespace Meshtastic;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Air quality metrics
 *
 * Generated from protobuf message <code>meshtastic.AirQualityMetrics</code>
 */
class AirQualityMetrics extends \Google\Protobuf\Internal\Message
{
    /**
     * Concentration Units Standard PM1.0 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm10_standard = 1;</code>
     */
    protected $pm10_standard = null;
    /**
     * Concentration Units Standard PM2.5 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm25_standard = 2;</code>
     */
    protected $pm25_standard = null;
    /**
     * Concentration Units Standard PM10.0 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm100_standard = 3;</code>
     */
    protected $pm100_standard = null;
    /**
     * Concentration Units Environmental PM1.0 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm10_environmental = 4;</code>
     */
    protected $pm10_environmental = null;
    /**
     * Concentration Units Environmental PM2.5 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm25_environmental = 5;</code>
     */
    protected $pm25_environmental = null;
    /**
     * Concentration Units Environmental PM10.0 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm100_environmental = 6;</code>
     */
    protected $pm100_environmental = null;
    /**
     * 0.3um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_03um = 7;</code>
     */
    protected $particles_03um = null;
    /**
     * 0.5um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_05um = 8;</code>
     */
    protected $particles_05um = null;
    /**
     * 1.0um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_10um = 9;</code>
     */
    protected $particles_10um = null;
    /**
     * 2.5um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_25um = 10;</code>
     */
    protected $particles_25um = null;
    /**
     * 5.0um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_50um = 11;</code>
     */
    protected $particles_50um = null;
    /**
     * 10.0um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_100um = 12;</code>
     */
    protected $particles_100um = null;
    /**
     * CO2 concentration in ppm
     *
     * Generated from protobuf field <code>optional uint32 co2 = 13;</code>
     */
    protected $co2 = null;
    /**
     * CO2 sensor temperature in degC
     *
     * Generated from protobuf field <code>optional float co2_temperature = 14;</code>
     */
    protected $co2_temperature = null;
    /**
     * CO2 sensor relative humidity in %
     *
     * Generated from protobuf field <code>optional float co2_humidity = 15;</code>
     */
    protected $co2_humidity = null;
    /**
     * Formaldehyde sensor formaldehyde concentration in ppb
     *
     * Generated from protobuf field <code>optional float form_formaldehyde = 16;</code>
     */
    protected $form_formaldehyde = null;
    /**
     * Formaldehyde sensor relative humidity in %RH
     *
     * Generated from protobuf field <code>optional float form_humidity = 17;</code>
     */
    protected $form_humidity = null;
    /**
     * Formaldehyde sensor temperature in degrees Celsius
     *
     * Generated from protobuf field <code>optional float form_temperature = 18;</code>
     */
    protected $form_temperature = null;
    /**
     * Concentration Units Standard PM4.0 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm40_standard = 19;</code>
     */
    protected $pm40_standard = null;
    /**
     * 4.0um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_40um = 20;</code>
     */
    protected $particles_40um = null;
    /**
     * PM Sensor Temperature
     *
     * Generated from protobuf field <code>optional float pm_temperature = 21;</code>
     */
    protected $pm_temperature = null;
    /**
     * PM Sensor humidity
     *
     * Generated from protobuf field <code>optional float pm_humidity = 22;</code>
     */
    protected $pm_humidity = null;
    /**
     * PM Sensor VOC Index
     *
     * Generated from protobuf field <code>optional float pm_voc_idx = 23;</code>
     */
    protected $pm_voc_idx = null;
    /**
     * PM Sensor NOx Index
     *
     * Generated from protobuf field <code>optional float pm_nox_idx = 24;</code>
     */
    protected $pm_nox_idx = null;
    /**
     * Typical Particle Size in um
     *
     * Generated from protobuf field <code>optional float particles_tps = 25;</code>
     */
    protected $particles_tps = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $pm10_standard
     *           Concentration Units Standard PM1.0 in ug/m3
     *     @type int $pm25_standard
     *           Concentration Units Standard PM2.5 in ug/m3
     *     @type int $pm100_standard
     *           Concentration Units Standard PM10.0 in ug/m3
     *     @type int $pm10_environmental
     *           Concentration Units Environmental PM1.0 in ug/m3
     *     @type int $pm25_environmental
     *           Concentration Units Environmental PM2.5 in ug/m3
     *     @type int $pm100_environmental
     *           Concentration Units Environmental PM10.0 in ug/m3
     *     @type int $particles_03um
     *           0.3um Particle Count in #/0.1l
     *     @type int $particles_05um
     *           0.5um Particle Count in #/0.1l
     *     @type int $particles_10um
     *           1.0um Particle Count in #/0.1l
     *     @type int $particles_25um
     *           2.5um Particle Count in #/0.1l
     *     @type int $particles_50um
     *           5.0um Particle Count in #/0.1l
     *     @type int $particles_100um
     *           10.0um Particle Count in #/0.1l
     *     @type int $co2
     *           CO2 concentration in ppm
     *     @type float $co2_temperature
     *           CO2 sensor temperature in degC
     *     @type float $co2_humidity
     *           CO2 sensor relative humidity in %
     *     @type float $form_formaldehyde
     *           Formaldehyde sensor formaldehyde concentration in ppb
     *     @type float $form_humidity
     *           Formaldehyde sensor relative humidity in %RH
     *     @type float $form_temperature
     *           Formaldehyde sensor temperature in degrees Celsius
     *     @type int $pm40_standard
     *           Concentration Units Standard PM4.0 in ug/m3
     *     @type int $particles_40um
     *           4.0um Particle Count in #/0.1l
     *     @type float $pm_temperature
     *           PM Sensor Temperature
     *     @type float $pm_humidity
     *           PM Sensor humidity
     *     @type float $pm_voc_idx
     *           PM Sensor VOC Index
     *     @type float $pm_nox_idx
     *           PM Sensor NOx Index
     *     @type float $particles_tps
     *           Typical Particle Size in um
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Meshtastic\Telemetry::initOnce();
        parent::__construct($data);
    }

    /**
     * Concentration Units Standard PM1.0 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm10_standard = 1;</code>
     * @return int
     */
    public function getPm10Standard()
    {
        return isset($this->pm10_standard) ? $this->pm10_standard : 0;
    }

    public function hasPm10Standard()
    {
        return isset($this->pm10_standard);
    }

    public function clearPm10Standard()
    {
        unset($this->pm10_standard);
    }

    /**
     * Concentration Units Standard PM1.0 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm10_standard = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setPm10Standard($var)
    {
        GPBUtil::checkUint32($var);
        $this->pm10_standard = $var;

        return $this;
    }

    /**
     * Concentration Units Standard PM2.5 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm25_standard = 2;</code>
     * @return int
     */
    public function getPm25Standard()
    {
        return isset($this->pm25_standard) ? $this->pm25_standard : 0;
    }

    public function hasPm25Standard()
    {
        return isset($this->pm25_standard);
    }

    public function clearPm25Standard()
    {
        unset($this->pm25_standard);
    }

    /**
     * Concentration Units Standard PM2.5 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm25_standard = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setPm25Standard($var)
    {
        GPBUtil::checkUint32($var);
        $this->pm25_standard = $var;

        return $this;
    }

    /**
     * Concentration Units Standard PM10.0 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm100_standard = 3;</code>
     * @return int
     */
    public function getPm100Standard()
    {
        return isset($this->pm100_standard) ? $this->pm100_standard : 0;
    }

    public function hasPm100Standard()
    {
        return isset($this->pm100_standard);
    }

    public function clearPm100Standard()
    {
        unset($this->pm100_standard);
    }

    /**
     * Concentration Units Standard PM10.0 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm100_standard = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setPm100Standard($var)
    {
        GPBUtil::checkUint32($var);
        $this->pm100_standard = $var;

        return $this;
    }

    /**
     * Concentration Units Environmental PM1.0 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm10_environmental = 4;</code>
     * @return int
     */
    public function getPm10Environmental()
    {
        return isset($this->pm10_environmental) ? $this->pm10_environmental : 0;
    }

    public function hasPm10Environmental()
    {
        return isset($this->pm10_environmental);
    }

    public function clearPm10Environmental()
    {
        unset($this->pm10_environmental);
    }

    /**
     * Concentration Units Environmental PM1.0 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm10_environmental = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setPm10Environmental($var)
    {
        GPBUtil::checkUint32($var);
        $this->pm10_environmental = $var;

        return $this;
    }

    /**
     * Concentration Units Environmental PM2.5 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm25_environmental = 5;</code>
     * @return int
     */
    public function getPm25Environmental()
    {
        return isset($this->pm25_environmental) ? $this->pm25_environmental : 0;
    }

    public function hasPm25Environmental()
    {
        return isset($this->pm25_environmental);
    }

    public function clearPm25Environmental()
    {
        unset($this->pm25_environmental);
    }

    /**
     * Concentration Units Environmental PM2.5 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm25_environmental = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setPm25Environmental($var)
    {
        GPBUtil::checkUint32($var);
        $this->pm25_environmental = $var;

        return $this;
    }

    /**
     * Concentration Units Environmental PM10.0 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm100_environmental = 6;</code>
     * @return int
     */
    public function getPm100Environmental()
    {
        return isset($this->pm100_environmental) ? $this->pm100_environmental : 0;
    }

    public function hasPm100Environmental()
    {
        return isset($this->pm100_environmental);
    }

    public function clearPm100Environmental()
    {
        unset($this->pm100_environmental);
    }

    /**
     * Concentration Units Environmental PM10.0 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm100_environmental = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setPm100Environmental($var)
    {
        GPBUtil::checkUint32($var);
        $this->pm100_environmental = $var;

        return $this;
    }

    /**
     * 0.3um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_03um = 7;</code>
     * @return int
     */
    public function getParticles03Um()
    {
        return isset($this->particles_03um) ? $this->particles_03um : 0;
    }

    public function hasParticles03Um()
    {
        return isset($this->particles_03um);
    }

    public function clearParticles03Um()
    {
        unset($this->particles_03um);
    }

    /**
     * 0.3um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_03um = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setParticles03Um($var)
    {
        GPBUtil::checkUint32($var);
        $this->particles_03um = $var;

        return $this;
    }

    /**
     * 0.5um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_05um = 8;</code>
     * @return int
     */
    public function getParticles05Um()
    {
        return isset($this->particles_05um) ? $this->particles_05um : 0;
    }

    public function hasParticles05Um()
    {
        return isset($this->particles_05um);
    }

    public function clearParticles05Um()
    {
        unset($this->particles_05um);
    }

    /**
     * 0.5um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_05um = 8;</code>
     * @param int $var
     * @return $this
     */
    public function setParticles05Um($var)
    {
        GPBUtil::checkUint32($var);
        $this->particles_05um = $var;

        return $this;
    }

    /**
     * 1.0um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_10um = 9;</code>
     * @return int
     */
    public function getParticles10Um()
    {
        return isset($this->particles_10um) ? $this->particles_10um : 0;
    }

    public function hasParticles10Um()
    {
        return isset($this->particles_10um);
    }

    public function clearParticles10Um()
    {
        unset($this->particles_10um);
    }

    /**
     * 1.0um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_10um = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setParticles10Um($var)
    {
        GPBUtil::checkUint32($var);
        $this->particles_10um = $var;

        return $this;
    }

    /**
     * 2.5um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_25um = 10;</code>
     * @return int
     */
    public function getParticles25Um()
    {
        return isset($this->particles_25um) ? $this->particles_25um : 0;
    }

    public function hasParticles25Um()
    {
        return isset($this->particles_25um);
    }

    public function clearParticles25Um()
    {
        unset($this->particles_25um);
    }

    /**
     * 2.5um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_25um = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setParticles25Um($var)
    {
        GPBUtil::checkUint32($var);
        $this->particles_25um = $var;

        return $this;
    }

    /**
     * 5.0um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_50um = 11;</code>
     * @return int
     */
    public function getParticles50Um()
    {
        return isset($this->particles_50um) ? $this->particles_50um : 0;
    }

    public function hasParticles50Um()
    {
        return isset($this->particles_50um);
    }

    public function clearParticles50Um()
    {
        unset($this->particles_50um);
    }

    /**
     * 5.0um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_50um = 11;</code>
     * @param int $var
     * @return $this
     */
    public function setParticles50Um($var)
    {
        GPBUtil::checkUint32($var);
        $this->particles_50um = $var;

        return $this;
    }

    /**
     * 10.0um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_100um = 12;</code>
     * @return int
     */
    public function getParticles100Um()
    {
        return isset($this->particles_100um) ? $this->particles_100um : 0;
    }

    public function hasParticles100Um()
    {
        return isset($this->particles_100um);
    }

    public function clearParticles100Um()
    {
        unset($this->particles_100um);
    }

    /**
     * 10.0um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_100um = 12;</code>
     * @param int $var
     * @return $this
     */
    public function setParticles100Um($var)
    {
        GPBUtil::checkUint32($var);
        $this->particles_100um = $var;

        return $this;
    }

    /**
     * CO2 concentration in ppm
     *
     * Generated from protobuf field <code>optional uint32 co2 = 13;</code>
     * @return int
     */
    public function getCo2()
    {
        return isset($this->co2) ? $this->co2 : 0;
    }

    public function hasCo2()
    {
        return isset($this->co2);
    }

    public function clearCo2()
    {
        unset($this->co2);
    }

    /**
     * CO2 concentration in ppm
     *
     * Generated from protobuf field <code>optional uint32 co2 = 13;</code>
     * @param int $var
     * @return $this
     */
    public function setCo2($var)
    {
        GPBUtil::checkUint32($var);
        $this->co2 = $var;

        return $this;
    }

    /**
     * CO2 sensor temperature in degC
     *
     * Generated from protobuf field <code>optional float co2_temperature = 14;</code>
     * @return float
     */
    public function getCo2Temperature()
    {
        return isset($this->co2_temperature) ? $this->co2_temperature : 0.0;
    }

    public function hasCo2Temperature()
    {
        return isset($this->co2_temperature);
    }

    public function clearCo2Temperature()
    {
        unset($this->co2_temperature);
    }

    /**
     * CO2 sensor temperature in degC
     *
     * Generated from protobuf field <code>optional float co2_temperature = 14;</code>
     * @param float $var
     * @return $this
     */
    public function setCo2Temperature($var)
    {
        GPBUtil::checkFloat($var);
        $this->co2_temperature = $var;

        return $this;
    }

    /**
     * CO2 sensor relative humidity in %
     *
     * Generated from protobuf field <code>optional float co2_humidity = 15;</code>
     * @return float
     */
    public function getCo2Humidity()
    {
        return isset($this->co2_humidity) ? $this->co2_humidity : 0.0;
    }

    public function hasCo2Humidity()
    {
        return isset($this->co2_humidity);
    }

    public function clearCo2Humidity()
    {
        unset($this->co2_humidity);
    }

    /**
     * CO2 sensor relative humidity in %
     *
     * Generated from protobuf field <code>optional float co2_humidity = 15;</code>
     * @param float $var
     * @return $this
     */
    public function setCo2Humidity($var)
    {
        GPBUtil::checkFloat($var);
        $this->co2_humidity = $var;

        return $this;
    }

    /**
     * Formaldehyde sensor formaldehyde concentration in ppb
     *
     * Generated from protobuf field <code>optional float form_formaldehyde = 16;</code>
     * @return float
     */
    public function getFormFormaldehyde()
    {
        return isset($this->form_formaldehyde) ? $this->form_formaldehyde : 0.0;
    }

    public function hasFormFormaldehyde()
    {
        return isset($this->form_formaldehyde);
    }

    public function clearFormFormaldehyde()
    {
        unset($this->form_formaldehyde);
    }

    /**
     * Formaldehyde sensor formaldehyde concentration in ppb
     *
     * Generated from protobuf field <code>optional float form_formaldehyde = 16;</code>
     * @param float $var
     * @return $this
     */
    public function setFormFormaldehyde($var)
    {
        GPBUtil::checkFloat($var);
        $this->form_formaldehyde = $var;

        return $this;
    }

    /**
     * Formaldehyde sensor relative humidity in %RH
     *
     * Generated from protobuf field <code>optional float form_humidity = 17;</code>
     * @return float
     */
    public function getFormHumidity()
    {
        return isset($this->form_humidity) ? $this->form_humidity : 0.0;
    }

    public function hasFormHumidity()
    {
        return isset($this->form_humidity);
    }

    public function clearFormHumidity()
    {
        unset($this->form_humidity);
    }

    /**
     * Formaldehyde sensor relative humidity in %RH
     *
     * Generated from protobuf field <code>optional float form_humidity = 17;</code>
     * @param float $var
     * @return $this
     */
    public function setFormHumidity($var)
    {
        GPBUtil::checkFloat($var);
        $this->form_humidity = $var;

        return $this;
    }

    /**
     * Formaldehyde sensor temperature in degrees Celsius
     *
     * Generated from protobuf field <code>optional float form_temperature = 18;</code>
     * @return float
     */
    public function getFormTemperature()
    {
        return isset($this->form_temperature) ? $this->form_temperature : 0.0;
    }

    public function hasFormTemperature()
    {
        return isset($this->form_temperature);
    }

    public function clearFormTemperature()
    {
        unset($this->form_temperature);
    }

    /**
     * Formaldehyde sensor temperature in degrees Celsius
     *
     * Generated from protobuf field <code>optional float form_temperature = 18;</code>
     * @param float $var
     * @return $this
     */
    public function setFormTemperature($var)
    {
        GPBUtil::checkFloat($var);
        $this->form_temperature = $var;

        return $this;
    }

    /**
     * Concentration Units Standard PM4.0 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm40_standard = 19;</code>
     * @return int
     */
    public function getPm40Standard()
    {
        return isset($this->pm40_standard) ? $this->pm40_standard : 0;
    }

    public function hasPm40Standard()
    {
        return isset($this->pm40_standard);
    }

    public function clearPm40Standard()
    {
        unset($this->pm40_standard);
    }

    /**
     * Concentration Units Standard PM4.0 in ug/m3
     *
     * Generated from protobuf field <code>optional uint32 pm40_standard = 19;</code>
     * @param int $var
     * @return $this
     */
    public function setPm40Standard($var)
    {
        GPBUtil::checkUint32($var);
        $this->pm40_standard = $var;

        return $this;
    }

    /**
     * 4.0um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_40um = 20;</code>
     * @return int
     */
    public function getParticles40Um()
    {
        return isset($this->particles_40um) ? $this->particles_40um : 0;
    }

    public function hasParticles40Um()
    {
        return isset($this->particles_40um);
    }

    public function clearParticles40Um()
    {
        unset($this->particles_40um);
    }

    /**
     * 4.0um Particle Count in #/0.1l
     *
     * Generated from protobuf field <code>optional uint32 particles_40um = 20;</code>
     * @param int $var
     * @return $this
     */
    public function setParticles40Um($var)
    {
        GPBUtil::checkUint32($var);
        $this->particles_40um = $var;

        return $this;
    }

    /**
     * PM Sensor Temperature
     *
     * Generated from protobuf field <code>optional float pm_temperature = 21;</code>
     * @return float
     */
    public function getPmTemperature()
    {
        return isset($this->pm_temperature) ? $this->pm_temperature : 0.0;
    }

    public function hasPmTemperature()
    {
        return isset($this->pm_temperature);
    }

    public function clearPmTemperature()
    {
        unset($this->pm_temperature);
    }

    /**
     * PM Sensor Temperature
     *
     * Generated from protobuf field <code>optional float pm_temperature = 21;</code>
     * @param float $var
     * @return $this
     */
    public function setPmTemperature($var)
    {
        GPBUtil::checkFloat($var);
        $this->pm_temperature = $var;

        return $this;
    }

    /**
     * PM Sensor humidity
     *
     * Generated from protobuf field <code>optional float pm_humidity = 22;</code>
     * @return float
     */
    public function getPmHumidity()
    {
        return isset($this->pm_humidity) ? $this->pm_humidity : 0.0;
    }

    public function hasPmHumidity()
    {
        return isset($this->pm_humidity);
    }

    public function clearPmHumidity()
    {
        unset($this->pm_humidity);
    }

    /**
     * PM Sensor humidity
     *
     * Generated from protobuf field <code>optional float pm_humidity = 22;</code>
     * @param float $var
     * @return $this
     */
    public function setPmHumidity($var)
    {
        GPBUtil::checkFloat($var);
        $this->pm_humidity = $var;

        return $this;
    }

    /**
     * PM Sensor VOC Index
     *
     * Generated from protobuf field <code>optional float pm_voc_idx = 23;</code>
     * @return float
     */
    public function getPmVocIdx()
    {
        return isset($this->pm_voc_idx) ? $this->pm_voc_idx : 0.0;
    }

    public function hasPmVocIdx()
    {
        return isset($this->pm_voc_idx);
    }

    public function clearPmVocIdx()
    {
        unset($this->pm_voc_idx);
    }

    /**
     * PM Sensor VOC Index
     *
     * Generated from protobuf field <code>optional float pm_voc_idx = 23;</code>
     * @param float $var
     * @return $this
     */
    public function setPmVocIdx($var)
    {
        GPBUtil::checkFloat($var);
        $this->pm_voc_idx = $var;

        return $this;
    }

    /**
     * PM Sensor NOx Index
     *
     * Generated from protobuf field <code>optional float pm_nox_idx = 24;</code>
     * @return float
     */
    public function getPmNoxIdx()
    {
        return isset($this->pm_nox_idx) ? $this->pm_nox_idx : 0.0;
    }

    public function hasPmNoxIdx()
    {
        return isset($this->pm_nox_idx);
    }

    public function clearPmNoxIdx()
    {
        unset($this->pm_nox_idx);
    }

    /**
     * PM Sensor NOx Index
     *
     * Generated from protobuf field <code>optional float pm_nox_idx = 24;</code>
     * @param float $var
     * @return $this
     */
    public function setPmNoxIdx($var)
    {
        GPBUtil::checkFloat($var);
        $this->pm_nox_idx = $var;

        return $this;
    }

    /**
     * Typical Particle Size in um
     *
     * Generated from protobuf field <code>optional float particles_tps = 25;</code>
     * @return float
     */
    public function getParticlesTps()
    {
        return isset($this->particles_tps) ? $this->particles_tps : 0.0;
    }

    public function hasParticlesTps()
    {
        return isset($this->particles_tps);
    }

    public function clearParticlesTps()
    {
        unset($this->particles_tps);
    }

    /**
     * Typical Particle Size in um
     *
     * Generated from protobuf field <code>optional float particles_tps = 25;</code>
     * @param float $var
     * @return $this
     */
    public function setParticlesTps($var)
    {
        GPBUtil::checkFloat($var);
        $this->particles_tps = $var;

        return $this;
    }

}

