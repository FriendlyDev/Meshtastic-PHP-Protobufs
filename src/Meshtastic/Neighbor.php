<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/mesh.proto

namespace Meshtastic;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A single edge in the mesh
 *
 * Generated from protobuf message <code>meshtastic.Neighbor</code>
 */
class Neighbor extends \Google\Protobuf\Internal\Message
{
    /**
     * Node ID of neighbor
     *
     * Generated from protobuf field <code>uint32 node_id = 1;</code>
     */
    protected $node_id = 0;
    /**
     * SNR of last heard message
     *
     * Generated from protobuf field <code>float snr = 2;</code>
     */
    protected $snr = 0.0;
    /**
     * Reception time (in secs since 1970) of last message that was last sent by this ID.
     * Note: this is for local storage only and will not be sent out over the mesh.
     *
     * Generated from protobuf field <code>fixed32 last_rx_time = 3;</code>
     */
    protected $last_rx_time = 0;
    /**
     * Broadcast interval of this neighbor (in seconds).
     * Note: this is for local storage only and will not be sent out over the mesh.
     *
     * Generated from protobuf field <code>uint32 node_broadcast_interval_secs = 4;</code>
     */
    protected $node_broadcast_interval_secs = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $node_id
     *           Node ID of neighbor
     *     @type float $snr
     *           SNR of last heard message
     *     @type int $last_rx_time
     *           Reception time (in secs since 1970) of last message that was last sent by this ID.
     *           Note: this is for local storage only and will not be sent out over the mesh.
     *     @type int $node_broadcast_interval_secs
     *           Broadcast interval of this neighbor (in seconds).
     *           Note: this is for local storage only and will not be sent out over the mesh.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Meshtastic\Mesh::initOnce();
        parent::__construct($data);
    }

    /**
     * Node ID of neighbor
     *
     * Generated from protobuf field <code>uint32 node_id = 1;</code>
     * @return int
     */
    public function getNodeId()
    {
        return $this->node_id;
    }

    /**
     * Node ID of neighbor
     *
     * Generated from protobuf field <code>uint32 node_id = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setNodeId($var)
    {
        GPBUtil::checkUint32($var);
        $this->node_id = $var;

        return $this;
    }

    /**
     * SNR of last heard message
     *
     * Generated from protobuf field <code>float snr = 2;</code>
     * @return float
     */
    public function getSnr()
    {
        return $this->snr;
    }

    /**
     * SNR of last heard message
     *
     * Generated from protobuf field <code>float snr = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setSnr($var)
    {
        GPBUtil::checkFloat($var);
        $this->snr = $var;

        return $this;
    }

    /**
     * Reception time (in secs since 1970) of last message that was last sent by this ID.
     * Note: this is for local storage only and will not be sent out over the mesh.
     *
     * Generated from protobuf field <code>fixed32 last_rx_time = 3;</code>
     * @return int
     */
    public function getLastRxTime()
    {
        return $this->last_rx_time;
    }

    /**
     * Reception time (in secs since 1970) of last message that was last sent by this ID.
     * Note: this is for local storage only and will not be sent out over the mesh.
     *
     * Generated from protobuf field <code>fixed32 last_rx_time = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setLastRxTime($var)
    {
        GPBUtil::checkUint32($var);
        $this->last_rx_time = $var;

        return $this;
    }

    /**
     * Broadcast interval of this neighbor (in seconds).
     * Note: this is for local storage only and will not be sent out over the mesh.
     *
     * Generated from protobuf field <code>uint32 node_broadcast_interval_secs = 4;</code>
     * @return int
     */
    public function getNodeBroadcastIntervalSecs()
    {
        return $this->node_broadcast_interval_secs;
    }

    /**
     * Broadcast interval of this neighbor (in seconds).
     * Note: this is for local storage only and will not be sent out over the mesh.
     *
     * Generated from protobuf field <code>uint32 node_broadcast_interval_secs = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setNodeBroadcastIntervalSecs($var)
    {
        GPBUtil::checkUint32($var);
        $this->node_broadcast_interval_secs = $var;

        return $this;
    }

}

