<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/powermon.proto

namespace Meshtastic\PowerStressMessage;

use UnexpectedValueException;

/**
 * What operation would we like the UUT to perform.
 * note: senders should probably set want_response in their request packets, so that they can know when the state
 * machine has started processing their request
 *
 * Protobuf type <code>meshtastic.PowerStressMessage.Opcode</code>
 */
class Opcode
{
    /**
     * Unset/unused
     *
     * Generated from protobuf enum <code>UNSET = 0;</code>
     */
    const PBUNSET = 0;
    /**
     * Print board version slog and send an ack that we are alive and ready to process commands
     *
     * Generated from protobuf enum <code>PRINT_INFO = 1;</code>
     */
    const PRINT_INFO = 1;
    /**
     * Try to turn off all automatic processing of packets, screen, sleeping, etc (to make it easier to measure in isolation)
     *
     * Generated from protobuf enum <code>FORCE_QUIET = 2;</code>
     */
    const FORCE_QUIET = 2;
    /**
     * Stop powerstress processing - probably by just rebooting the board
     *
     * Generated from protobuf enum <code>END_QUIET = 3;</code>
     */
    const END_QUIET = 3;
    /**
     * Turn the screen on
     *
     * Generated from protobuf enum <code>SCREEN_ON = 16;</code>
     */
    const SCREEN_ON = 16;
    /**
     * Turn the screen off
     *
     * Generated from protobuf enum <code>SCREEN_OFF = 17;</code>
     */
    const SCREEN_OFF = 17;
    /**
     * Let the CPU run but we assume mostly idling for num_seconds
     *
     * Generated from protobuf enum <code>CPU_IDLE = 32;</code>
     */
    const CPU_IDLE = 32;
    /**
     * Force deep sleep for FIXME seconds
     *
     * Generated from protobuf enum <code>CPU_DEEPSLEEP = 33;</code>
     */
    const CPU_DEEPSLEEP = 33;
    /**
     * Spin the CPU as fast as possible for num_seconds
     *
     * Generated from protobuf enum <code>CPU_FULLON = 34;</code>
     */
    const CPU_FULLON = 34;
    /**
     * Turn the LED on for num_seconds (and leave it on - for baseline power measurement purposes)
     *
     * Generated from protobuf enum <code>LED_ON = 48;</code>
     */
    const LED_ON = 48;
    /**
     * Force the LED off for num_seconds
     *
     * Generated from protobuf enum <code>LED_OFF = 49;</code>
     */
    const LED_OFF = 49;
    /**
     * Completely turn off the LORA radio for num_seconds
     *
     * Generated from protobuf enum <code>LORA_OFF = 64;</code>
     */
    const LORA_OFF = 64;
    /**
     * Send Lora packets for num_seconds
     *
     * Generated from protobuf enum <code>LORA_TX = 65;</code>
     */
    const LORA_TX = 65;
    /**
     * Receive Lora packets for num_seconds (node will be mostly just listening, unless an external agent is helping stress this by sending packets on the current channel)
     *
     * Generated from protobuf enum <code>LORA_RX = 66;</code>
     */
    const LORA_RX = 66;
    /**
     * Turn off the BT radio for num_seconds
     *
     * Generated from protobuf enum <code>BT_OFF = 80;</code>
     */
    const BT_OFF = 80;
    /**
     * Turn on the BT radio for num_seconds
     *
     * Generated from protobuf enum <code>BT_ON = 81;</code>
     */
    const BT_ON = 81;
    /**
     * Turn off the WIFI radio for num_seconds
     *
     * Generated from protobuf enum <code>WIFI_OFF = 96;</code>
     */
    const WIFI_OFF = 96;
    /**
     * Turn on the WIFI radio for num_seconds
     *
     * Generated from protobuf enum <code>WIFI_ON = 97;</code>
     */
    const WIFI_ON = 97;
    /**
     * Turn off the GPS radio for num_seconds
     *
     * Generated from protobuf enum <code>GPS_OFF = 112;</code>
     */
    const GPS_OFF = 112;
    /**
     * Turn on the GPS radio for num_seconds
     *
     * Generated from protobuf enum <code>GPS_ON = 113;</code>
     */
    const GPS_ON = 113;

    private static $valueToName = [
        self::PBUNSET => 'UNSET',
        self::PRINT_INFO => 'PRINT_INFO',
        self::FORCE_QUIET => 'FORCE_QUIET',
        self::END_QUIET => 'END_QUIET',
        self::SCREEN_ON => 'SCREEN_ON',
        self::SCREEN_OFF => 'SCREEN_OFF',
        self::CPU_IDLE => 'CPU_IDLE',
        self::CPU_DEEPSLEEP => 'CPU_DEEPSLEEP',
        self::CPU_FULLON => 'CPU_FULLON',
        self::LED_ON => 'LED_ON',
        self::LED_OFF => 'LED_OFF',
        self::LORA_OFF => 'LORA_OFF',
        self::LORA_TX => 'LORA_TX',
        self::LORA_RX => 'LORA_RX',
        self::BT_OFF => 'BT_OFF',
        self::BT_ON => 'BT_ON',
        self::WIFI_OFF => 'WIFI_OFF',
        self::WIFI_ON => 'WIFI_ON',
        self::GPS_OFF => 'GPS_OFF',
        self::GPS_ON => 'GPS_ON',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            $pbconst =  __CLASS__. '::PB' . strtoupper($name);
            if (!defined($pbconst)) {
                throw new UnexpectedValueException(sprintf(
                        'Enum %s has no value defined for name %s', __CLASS__, $name));
            }
            return constant($pbconst);
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Opcode::class, \Meshtastic\PowerStressMessage_Opcode::class);

