<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/deviceonly.proto

namespace Meshtastic;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Position with static location information only for NodeDBLite
 *
 * Generated from protobuf message <code>meshtastic.PositionLite</code>
 */
class PositionLite extends \Google\Protobuf\Internal\Message
{
    /**
     * The new preferred location encoding, multiply by 1e-7 to get degrees
     * in floating point
     *
     * Generated from protobuf field <code>sfixed32 latitude_i = 1;</code>
     */
    protected $latitude_i = 0;
    /**
     * TODO: REPLACE
     *
     * Generated from protobuf field <code>sfixed32 longitude_i = 2;</code>
     */
    protected $longitude_i = 0;
    /**
     * In meters above MSL (but see issue #359)
     *
     * Generated from protobuf field <code>int32 altitude = 3;</code>
     */
    protected $altitude = 0;
    /**
     * This is usually not sent over the mesh (to save space), but it is sent
     * from the phone so that the local device can set its RTC If it is sent over
     * the mesh (because there are devices on the mesh without GPS), it will only
     * be sent by devices which has a hardware GPS clock.
     * seconds since 1970
     *
     * Generated from protobuf field <code>fixed32 time = 4;</code>
     */
    protected $time = 0;
    /**
     * TODO: REPLACE
     *
     * Generated from protobuf field <code>.meshtastic.Position.LocSource location_source = 5;</code>
     */
    protected $location_source = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $latitude_i
     *           The new preferred location encoding, multiply by 1e-7 to get degrees
     *           in floating point
     *     @type int $longitude_i
     *           TODO: REPLACE
     *     @type int $altitude
     *           In meters above MSL (but see issue #359)
     *     @type int $time
     *           This is usually not sent over the mesh (to save space), but it is sent
     *           from the phone so that the local device can set its RTC If it is sent over
     *           the mesh (because there are devices on the mesh without GPS), it will only
     *           be sent by devices which has a hardware GPS clock.
     *           seconds since 1970
     *     @type int $location_source
     *           TODO: REPLACE
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Meshtastic\Deviceonly::initOnce();
        parent::__construct($data);
    }

    /**
     * The new preferred location encoding, multiply by 1e-7 to get degrees
     * in floating point
     *
     * Generated from protobuf field <code>sfixed32 latitude_i = 1;</code>
     * @return int
     */
    public function getLatitudeI()
    {
        return $this->latitude_i;
    }

    /**
     * The new preferred location encoding, multiply by 1e-7 to get degrees
     * in floating point
     *
     * Generated from protobuf field <code>sfixed32 latitude_i = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setLatitudeI($var)
    {
        GPBUtil::checkInt32($var);
        $this->latitude_i = $var;

        return $this;
    }

    /**
     * TODO: REPLACE
     *
     * Generated from protobuf field <code>sfixed32 longitude_i = 2;</code>
     * @return int
     */
    public function getLongitudeI()
    {
        return $this->longitude_i;
    }

    /**
     * TODO: REPLACE
     *
     * Generated from protobuf field <code>sfixed32 longitude_i = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setLongitudeI($var)
    {
        GPBUtil::checkInt32($var);
        $this->longitude_i = $var;

        return $this;
    }

    /**
     * In meters above MSL (but see issue #359)
     *
     * Generated from protobuf field <code>int32 altitude = 3;</code>
     * @return int
     */
    public function getAltitude()
    {
        return $this->altitude;
    }

    /**
     * In meters above MSL (but see issue #359)
     *
     * Generated from protobuf field <code>int32 altitude = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setAltitude($var)
    {
        GPBUtil::checkInt32($var);
        $this->altitude = $var;

        return $this;
    }

    /**
     * This is usually not sent over the mesh (to save space), but it is sent
     * from the phone so that the local device can set its RTC If it is sent over
     * the mesh (because there are devices on the mesh without GPS), it will only
     * be sent by devices which has a hardware GPS clock.
     * seconds since 1970
     *
     * Generated from protobuf field <code>fixed32 time = 4;</code>
     * @return int
     */
    public function getTime()
    {
        return $this->time;
    }

    /**
     * This is usually not sent over the mesh (to save space), but it is sent
     * from the phone so that the local device can set its RTC If it is sent over
     * the mesh (because there are devices on the mesh without GPS), it will only
     * be sent by devices which has a hardware GPS clock.
     * seconds since 1970
     *
     * Generated from protobuf field <code>fixed32 time = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setTime($var)
    {
        GPBUtil::checkUint32($var);
        $this->time = $var;

        return $this;
    }

    /**
     * TODO: REPLACE
     *
     * Generated from protobuf field <code>.meshtastic.Position.LocSource location_source = 5;</code>
     * @return int
     */
    public function getLocationSource()
    {
        return $this->location_source;
    }

    /**
     * TODO: REPLACE
     *
     * Generated from protobuf field <code>.meshtastic.Position.LocSource location_source = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setLocationSource($var)
    {
        GPBUtil::checkEnum($var, \Meshtastic\Position\LocSource::class);
        $this->location_source = $var;

        return $this;
    }

}

