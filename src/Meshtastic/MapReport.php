<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/mqtt.proto

namespace Meshtastic;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Information about a node intended to be reported unencrypted to a map using MQTT.
 *
 * Generated from protobuf message <code>meshtastic.MapReport</code>
 */
class MapReport extends \Google\Protobuf\Internal\Message
{
    /**
     * A full name for this user, i.e. "Kevin Hester"
     *
     * Generated from protobuf field <code>string long_name = 1;</code>
     */
    protected $long_name = '';
    /**
     * A VERY short name, ideally two characters.
     * Suitable for a tiny OLED screen
     *
     * Generated from protobuf field <code>string short_name = 2;</code>
     */
    protected $short_name = '';
    /**
     * Role of the node that applies specific settings for a particular use-case
     *
     * Generated from protobuf field <code>.meshtastic.Config.DeviceConfig.Role role = 3;</code>
     */
    protected $role = 0;
    /**
     * Hardware model of the node, i.e. T-Beam, Heltec V3, etc...
     *
     * Generated from protobuf field <code>.meshtastic.HardwareModel hw_model = 4;</code>
     */
    protected $hw_model = 0;
    /**
     * Device firmware version string
     *
     * Generated from protobuf field <code>string firmware_version = 5;</code>
     */
    protected $firmware_version = '';
    /**
     * The region code for the radio (US, CN, EU433, etc...)
     *
     * Generated from protobuf field <code>.meshtastic.Config.LoRaConfig.RegionCode region = 6;</code>
     */
    protected $region = 0;
    /**
     * Modem preset used by the radio (LongFast, MediumSlow, etc...)
     *
     * Generated from protobuf field <code>.meshtastic.Config.LoRaConfig.ModemPreset modem_preset = 7;</code>
     */
    protected $modem_preset = 0;
    /**
     * Whether the node has a channel with default PSK and name (LongFast, MediumSlow, etc...)
     * and it uses the default frequency slot given the region and modem preset.
     *
     * Generated from protobuf field <code>bool has_default_channel = 8;</code>
     */
    protected $has_default_channel = false;
    /**
     * Latitude: multiply by 1e-7 to get degrees in floating point
     *
     * Generated from protobuf field <code>sfixed32 latitude_i = 9;</code>
     */
    protected $latitude_i = 0;
    /**
     * Longitude: multiply by 1e-7 to get degrees in floating point
     *
     * Generated from protobuf field <code>sfixed32 longitude_i = 10;</code>
     */
    protected $longitude_i = 0;
    /**
     * Altitude in meters above MSL
     *
     * Generated from protobuf field <code>int32 altitude = 11;</code>
     */
    protected $altitude = 0;
    /**
     * Indicates the bits of precision for latitude and longitude set by the sending node
     *
     * Generated from protobuf field <code>uint32 position_precision = 12;</code>
     */
    protected $position_precision = 0;
    /**
     * Number of online nodes (heard in the last 2 hours) this node has in its list that were received locally (not via MQTT)
     *
     * Generated from protobuf field <code>uint32 num_online_local_nodes = 13;</code>
     */
    protected $num_online_local_nodes = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $long_name
     *           A full name for this user, i.e. "Kevin Hester"
     *     @type string $short_name
     *           A VERY short name, ideally two characters.
     *           Suitable for a tiny OLED screen
     *     @type int $role
     *           Role of the node that applies specific settings for a particular use-case
     *     @type int $hw_model
     *           Hardware model of the node, i.e. T-Beam, Heltec V3, etc...
     *     @type string $firmware_version
     *           Device firmware version string
     *     @type int $region
     *           The region code for the radio (US, CN, EU433, etc...)
     *     @type int $modem_preset
     *           Modem preset used by the radio (LongFast, MediumSlow, etc...)
     *     @type bool $has_default_channel
     *           Whether the node has a channel with default PSK and name (LongFast, MediumSlow, etc...)
     *           and it uses the default frequency slot given the region and modem preset.
     *     @type int $latitude_i
     *           Latitude: multiply by 1e-7 to get degrees in floating point
     *     @type int $longitude_i
     *           Longitude: multiply by 1e-7 to get degrees in floating point
     *     @type int $altitude
     *           Altitude in meters above MSL
     *     @type int $position_precision
     *           Indicates the bits of precision for latitude and longitude set by the sending node
     *     @type int $num_online_local_nodes
     *           Number of online nodes (heard in the last 2 hours) this node has in its list that were received locally (not via MQTT)
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Meshtastic\Mqtt::initOnce();
        parent::__construct($data);
    }

    /**
     * A full name for this user, i.e. "Kevin Hester"
     *
     * Generated from protobuf field <code>string long_name = 1;</code>
     * @return string
     */
    public function getLongName()
    {
        return $this->long_name;
    }

    /**
     * A full name for this user, i.e. "Kevin Hester"
     *
     * Generated from protobuf field <code>string long_name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setLongName($var)
    {
        GPBUtil::checkString($var, True);
        $this->long_name = $var;

        return $this;
    }

    /**
     * A VERY short name, ideally two characters.
     * Suitable for a tiny OLED screen
     *
     * Generated from protobuf field <code>string short_name = 2;</code>
     * @return string
     */
    public function getShortName()
    {
        return $this->short_name;
    }

    /**
     * A VERY short name, ideally two characters.
     * Suitable for a tiny OLED screen
     *
     * Generated from protobuf field <code>string short_name = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setShortName($var)
    {
        GPBUtil::checkString($var, True);
        $this->short_name = $var;

        return $this;
    }

    /**
     * Role of the node that applies specific settings for a particular use-case
     *
     * Generated from protobuf field <code>.meshtastic.Config.DeviceConfig.Role role = 3;</code>
     * @return int
     */
    public function getRole()
    {
        return $this->role;
    }

    /**
     * Role of the node that applies specific settings for a particular use-case
     *
     * Generated from protobuf field <code>.meshtastic.Config.DeviceConfig.Role role = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setRole($var)
    {
        GPBUtil::checkEnum($var, \Meshtastic\Config\DeviceConfig\Role::class);
        $this->role = $var;

        return $this;
    }

    /**
     * Hardware model of the node, i.e. T-Beam, Heltec V3, etc...
     *
     * Generated from protobuf field <code>.meshtastic.HardwareModel hw_model = 4;</code>
     * @return int
     */
    public function getHwModel()
    {
        return $this->hw_model;
    }

    /**
     * Hardware model of the node, i.e. T-Beam, Heltec V3, etc...
     *
     * Generated from protobuf field <code>.meshtastic.HardwareModel hw_model = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setHwModel($var)
    {
        GPBUtil::checkEnum($var, \Meshtastic\HardwareModel::class);
        $this->hw_model = $var;

        return $this;
    }

    /**
     * Device firmware version string
     *
     * Generated from protobuf field <code>string firmware_version = 5;</code>
     * @return string
     */
    public function getFirmwareVersion()
    {
        return $this->firmware_version;
    }

    /**
     * Device firmware version string
     *
     * Generated from protobuf field <code>string firmware_version = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setFirmwareVersion($var)
    {
        GPBUtil::checkString($var, True);
        $this->firmware_version = $var;

        return $this;
    }

    /**
     * The region code for the radio (US, CN, EU433, etc...)
     *
     * Generated from protobuf field <code>.meshtastic.Config.LoRaConfig.RegionCode region = 6;</code>
     * @return int
     */
    public function getRegion()
    {
        return $this->region;
    }

    /**
     * The region code for the radio (US, CN, EU433, etc...)
     *
     * Generated from protobuf field <code>.meshtastic.Config.LoRaConfig.RegionCode region = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setRegion($var)
    {
        GPBUtil::checkEnum($var, \Meshtastic\Config\LoRaConfig\RegionCode::class);
        $this->region = $var;

        return $this;
    }

    /**
     * Modem preset used by the radio (LongFast, MediumSlow, etc...)
     *
     * Generated from protobuf field <code>.meshtastic.Config.LoRaConfig.ModemPreset modem_preset = 7;</code>
     * @return int
     */
    public function getModemPreset()
    {
        return $this->modem_preset;
    }

    /**
     * Modem preset used by the radio (LongFast, MediumSlow, etc...)
     *
     * Generated from protobuf field <code>.meshtastic.Config.LoRaConfig.ModemPreset modem_preset = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setModemPreset($var)
    {
        GPBUtil::checkEnum($var, \Meshtastic\Config\LoRaConfig\ModemPreset::class);
        $this->modem_preset = $var;

        return $this;
    }

    /**
     * Whether the node has a channel with default PSK and name (LongFast, MediumSlow, etc...)
     * and it uses the default frequency slot given the region and modem preset.
     *
     * Generated from protobuf field <code>bool has_default_channel = 8;</code>
     * @return bool
     */
    public function getHasDefaultChannel()
    {
        return $this->has_default_channel;
    }

    /**
     * Whether the node has a channel with default PSK and name (LongFast, MediumSlow, etc...)
     * and it uses the default frequency slot given the region and modem preset.
     *
     * Generated from protobuf field <code>bool has_default_channel = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setHasDefaultChannel($var)
    {
        GPBUtil::checkBool($var);
        $this->has_default_channel = $var;

        return $this;
    }

    /**
     * Latitude: multiply by 1e-7 to get degrees in floating point
     *
     * Generated from protobuf field <code>sfixed32 latitude_i = 9;</code>
     * @return int
     */
    public function getLatitudeI()
    {
        return $this->latitude_i;
    }

    /**
     * Latitude: multiply by 1e-7 to get degrees in floating point
     *
     * Generated from protobuf field <code>sfixed32 latitude_i = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setLatitudeI($var)
    {
        GPBUtil::checkInt32($var);
        $this->latitude_i = $var;

        return $this;
    }

    /**
     * Longitude: multiply by 1e-7 to get degrees in floating point
     *
     * Generated from protobuf field <code>sfixed32 longitude_i = 10;</code>
     * @return int
     */
    public function getLongitudeI()
    {
        return $this->longitude_i;
    }

    /**
     * Longitude: multiply by 1e-7 to get degrees in floating point
     *
     * Generated from protobuf field <code>sfixed32 longitude_i = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setLongitudeI($var)
    {
        GPBUtil::checkInt32($var);
        $this->longitude_i = $var;

        return $this;
    }

    /**
     * Altitude in meters above MSL
     *
     * Generated from protobuf field <code>int32 altitude = 11;</code>
     * @return int
     */
    public function getAltitude()
    {
        return $this->altitude;
    }

    /**
     * Altitude in meters above MSL
     *
     * Generated from protobuf field <code>int32 altitude = 11;</code>
     * @param int $var
     * @return $this
     */
    public function setAltitude($var)
    {
        GPBUtil::checkInt32($var);
        $this->altitude = $var;

        return $this;
    }

    /**
     * Indicates the bits of precision for latitude and longitude set by the sending node
     *
     * Generated from protobuf field <code>uint32 position_precision = 12;</code>
     * @return int
     */
    public function getPositionPrecision()
    {
        return $this->position_precision;
    }

    /**
     * Indicates the bits of precision for latitude and longitude set by the sending node
     *
     * Generated from protobuf field <code>uint32 position_precision = 12;</code>
     * @param int $var
     * @return $this
     */
    public function setPositionPrecision($var)
    {
        GPBUtil::checkUint32($var);
        $this->position_precision = $var;

        return $this;
    }

    /**
     * Number of online nodes (heard in the last 2 hours) this node has in its list that were received locally (not via MQTT)
     *
     * Generated from protobuf field <code>uint32 num_online_local_nodes = 13;</code>
     * @return int
     */
    public function getNumOnlineLocalNodes()
    {
        return $this->num_online_local_nodes;
    }

    /**
     * Number of online nodes (heard in the last 2 hours) this node has in its list that were received locally (not via MQTT)
     *
     * Generated from protobuf field <code>uint32 num_online_local_nodes = 13;</code>
     * @param int $var
     * @return $this
     */
    public function setNumOnlineLocalNodes($var)
    {
        GPBUtil::checkUint32($var);
        $this->num_online_local_nodes = $var;

        return $this;
    }

}

