<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/mesh.proto

namespace Meshtastic;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Responses to a ChunkedPayload request
 *
 * Generated from protobuf message <code>meshtastic.ChunkedPayloadResponse</code>
 */
class ChunkedPayloadResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * The ID of the entire payload
     *
     * Generated from protobuf field <code>uint32 payload_id = 1;</code>
     */
    protected $payload_id = 0;
    protected $payload_variant;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $payload_id
     *           The ID of the entire payload
     *     @type bool $request_transfer
     *           Request to transfer chunked payload
     *     @type bool $accept_transfer
     *           Accept the transfer chunked payload
     *     @type \Meshtastic\resend_chunks $resend_chunks
     *           Request missing indexes in the chunked payload
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Meshtastic\Mesh::initOnce();
        parent::__construct($data);
    }

    /**
     * The ID of the entire payload
     *
     * Generated from protobuf field <code>uint32 payload_id = 1;</code>
     * @return int
     */
    public function getPayloadId()
    {
        return $this->payload_id;
    }

    /**
     * The ID of the entire payload
     *
     * Generated from protobuf field <code>uint32 payload_id = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setPayloadId($var)
    {
        GPBUtil::checkUint32($var);
        $this->payload_id = $var;

        return $this;
    }

    /**
     * Request to transfer chunked payload
     *
     * Generated from protobuf field <code>bool request_transfer = 2;</code>
     * @return bool
     */
    public function getRequestTransfer()
    {
        return $this->readOneof(2);
    }

    public function hasRequestTransfer()
    {
        return $this->hasOneof(2);
    }

    /**
     * Request to transfer chunked payload
     *
     * Generated from protobuf field <code>bool request_transfer = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setRequestTransfer($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Accept the transfer chunked payload
     *
     * Generated from protobuf field <code>bool accept_transfer = 3;</code>
     * @return bool
     */
    public function getAcceptTransfer()
    {
        return $this->readOneof(3);
    }

    public function hasAcceptTransfer()
    {
        return $this->hasOneof(3);
    }

    /**
     * Accept the transfer chunked payload
     *
     * Generated from protobuf field <code>bool accept_transfer = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setAcceptTransfer($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Request missing indexes in the chunked payload
     *
     * Generated from protobuf field <code>.meshtastic.resend_chunks resend_chunks = 4;</code>
     * @return \Meshtastic\resend_chunks|null
     */
    public function getResendChunks()
    {
        return $this->readOneof(4);
    }

    public function hasResendChunks()
    {
        return $this->hasOneof(4);
    }

    /**
     * Request missing indexes in the chunked payload
     *
     * Generated from protobuf field <code>.meshtastic.resend_chunks resend_chunks = 4;</code>
     * @param \Meshtastic\resend_chunks $var
     * @return $this
     */
    public function setResendChunks($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\resend_chunks::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getPayloadVariant()
    {
        return $this->whichOneof("payload_variant");
    }

}

