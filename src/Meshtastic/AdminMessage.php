<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/admin.proto

namespace Meshtastic;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * This message is handled by the Admin module and is responsible for all settings/channel read/write operations.
 * This message is used to do settings operations to both remote AND local nodes.
 * (Prior to 1.2 these operations were done via special ToRadio operations)
 *
 * Generated from protobuf message <code>meshtastic.AdminMessage</code>
 */
class AdminMessage extends \Google\Protobuf\Internal\Message
{
    /**
     * The node generates this key and sends it with any get_x_response packets.
     * The client MUST include the same key with any set_x commands. Key expires after 300 seconds.
     * Prevents replay attacks for admin messages.
     *
     * Generated from protobuf field <code>bytes session_passkey = 101;</code>
     */
    protected $session_passkey = '';
    protected $payload_variant;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $session_passkey
     *           The node generates this key and sends it with any get_x_response packets.
     *           The client MUST include the same key with any set_x commands. Key expires after 300 seconds.
     *           Prevents replay attacks for admin messages.
     *     @type int $get_channel_request
     *           Send the specified channel in the response to this message
     *           NOTE: This field is sent with the channel index + 1 (to ensure we never try to send 'zero' - which protobufs treats as not present)
     *     @type \Meshtastic\Channel $get_channel_response
     *           TODO: REPLACE
     *     @type bool $get_owner_request
     *           Send the current owner data in the response to this message.
     *     @type \Meshtastic\User $get_owner_response
     *           TODO: REPLACE
     *     @type int $get_config_request
     *           Ask for the following config data to be sent
     *     @type \Meshtastic\Config $get_config_response
     *           Send the current Config in the response to this message.
     *     @type int $get_module_config_request
     *           Ask for the following config data to be sent
     *     @type \Meshtastic\ModuleConfig $get_module_config_response
     *           Send the current Config in the response to this message.
     *     @type bool $get_canned_message_module_messages_request
     *           Get the Canned Message Module messages in the response to this message.
     *     @type string $get_canned_message_module_messages_response
     *           Get the Canned Message Module messages in the response to this message.
     *     @type bool $get_device_metadata_request
     *           Request the node to send device metadata (firmware, protobuf version, etc)
     *     @type \Meshtastic\DeviceMetadata $get_device_metadata_response
     *           Device metadata response
     *     @type bool $get_ringtone_request
     *           Get the Ringtone in the response to this message.
     *     @type string $get_ringtone_response
     *           Get the Ringtone in the response to this message.
     *     @type bool $get_device_connection_status_request
     *           Request the node to send it's connection status
     *     @type \Meshtastic\DeviceConnectionStatus $get_device_connection_status_response
     *           Device connection status response
     *     @type \Meshtastic\HamParameters $set_ham_mode
     *           Setup a node for licensed amateur (ham) radio operation
     *     @type bool $get_node_remote_hardware_pins_request
     *           Get the mesh's nodes with their available gpio pins for RemoteHardware module use
     *     @type \Meshtastic\NodeRemoteHardwarePinsResponse $get_node_remote_hardware_pins_response
     *           Respond with the mesh's nodes with their available gpio pins for RemoteHardware module use
     *     @type bool $enter_dfu_mode_request
     *           Enter (UF2) DFU mode
     *           Only implemented on NRF52 currently
     *     @type string $delete_file_request
     *           Delete the file by the specified path from the device
     *     @type int $set_scale
     *           Set zero and offset for scale chips
     *     @type int $backup_preferences
     *           Backup the node's preferences
     *     @type int $restore_preferences
     *           Restore the node's preferences
     *     @type int $remove_backup_preferences
     *           Remove backups of the node's preferences
     *     @type \Meshtastic\AdminMessage\InputEvent $send_input_event
     *           Send an input event to the node.
     *           This is used to trigger physical input events like button presses, touch events, etc.
     *     @type \Meshtastic\User $set_owner
     *           Set the owner for this node
     *     @type \Meshtastic\Channel $set_channel
     *           Set channels (using the new API).
     *           A special channel is the "primary channel".
     *           The other records are secondary channels.
     *           Note: only one channel can be marked as primary.
     *           If the client sets a particular channel to be primary, the previous channel will be set to SECONDARY automatically.
     *     @type \Meshtastic\Config $set_config
     *           Set the current Config
     *     @type \Meshtastic\ModuleConfig $set_module_config
     *           Set the current Config
     *     @type string $set_canned_message_module_messages
     *           Set the Canned Message Module messages text.
     *     @type string $set_ringtone_message
     *           Set the ringtone for ExternalNotification.
     *     @type int $remove_by_nodenum
     *           Remove the node by the specified node-num from the NodeDB on the device
     *     @type int $set_favorite_node
     *           Set specified node-num to be favorited on the NodeDB on the device
     *     @type int $remove_favorite_node
     *           Set specified node-num to be un-favorited on the NodeDB on the device
     *     @type \Meshtastic\Position $set_fixed_position
     *           Set fixed position data on the node and then set the position.fixed_position = true
     *     @type bool $remove_fixed_position
     *           Clear fixed position coordinates and then set position.fixed_position = false
     *     @type int $set_time_only
     *           Set time only on the node
     *           Convenience method to set the time on the node (as Net quality) without any other position data
     *     @type bool $get_ui_config_request
     *           Tell the node to send the stored ui data.
     *     @type \Meshtastic\DeviceUIConfig $get_ui_config_response
     *           Reply stored device ui data.
     *     @type \Meshtastic\DeviceUIConfig $store_ui_config
     *           Tell the node to store UI data persistently.
     *     @type int $set_ignored_node
     *           Set specified node-num to be ignored on the NodeDB on the device
     *     @type int $remove_ignored_node
     *           Set specified node-num to be un-ignored on the NodeDB on the device
     *     @type bool $begin_edit_settings
     *           Begins an edit transaction for config, module config, owner, and channel settings changes
     *           This will delay the standard *implicit* save to the file system and subsequent reboot behavior until committed (commit_edit_settings)
     *     @type bool $commit_edit_settings
     *           Commits an open transaction for any edits made to config, module config, owner, and channel settings
     *     @type \Meshtastic\SharedContact $add_contact
     *           Add a contact (User) to the nodedb
     *     @type \Meshtastic\KeyVerificationAdmin $key_verification
     *           Initiate or respond to a key verification request
     *     @type int $factory_reset_device
     *           Tell the node to factory reset config everything; all device state and configuration will be returned to factory defaults and BLE bonds will be cleared.
     *     @type int $reboot_ota_seconds
     *           Tell the node to reboot into the OTA Firmware in this many seconds (or <0 to cancel reboot)
     *           Only Implemented for ESP32 Devices. This needs to be issued to send a new main firmware via bluetooth.
     *     @type bool $exit_simulator
     *           This message is only supported for the simulator Portduino build.
     *           If received the simulator will exit successfully.
     *     @type int $reboot_seconds
     *           Tell the node to reboot in this many seconds (or <0 to cancel reboot)
     *     @type int $shutdown_seconds
     *           Tell the node to shutdown in this many seconds (or <0 to cancel shutdown)
     *     @type int $factory_reset_config
     *           Tell the node to factory reset config; all device state and configuration will be returned to factory defaults; BLE bonds will be preserved.
     *     @type int $nodedb_reset
     *           Tell the node to reset the nodedb.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Meshtastic\Admin::initOnce();
        parent::__construct($data);
    }

    /**
     * The node generates this key and sends it with any get_x_response packets.
     * The client MUST include the same key with any set_x commands. Key expires after 300 seconds.
     * Prevents replay attacks for admin messages.
     *
     * Generated from protobuf field <code>bytes session_passkey = 101;</code>
     * @return string
     */
    public function getSessionPasskey()
    {
        return $this->session_passkey;
    }

    /**
     * The node generates this key and sends it with any get_x_response packets.
     * The client MUST include the same key with any set_x commands. Key expires after 300 seconds.
     * Prevents replay attacks for admin messages.
     *
     * Generated from protobuf field <code>bytes session_passkey = 101;</code>
     * @param string $var
     * @return $this
     */
    public function setSessionPasskey($var)
    {
        GPBUtil::checkString($var, False);
        $this->session_passkey = $var;

        return $this;
    }

    /**
     * Send the specified channel in the response to this message
     * NOTE: This field is sent with the channel index + 1 (to ensure we never try to send 'zero' - which protobufs treats as not present)
     *
     * Generated from protobuf field <code>uint32 get_channel_request = 1;</code>
     * @return int
     */
    public function getGetChannelRequest()
    {
        return $this->readOneof(1);
    }

    public function hasGetChannelRequest()
    {
        return $this->hasOneof(1);
    }

    /**
     * Send the specified channel in the response to this message
     * NOTE: This field is sent with the channel index + 1 (to ensure we never try to send 'zero' - which protobufs treats as not present)
     *
     * Generated from protobuf field <code>uint32 get_channel_request = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setGetChannelRequest($var)
    {
        GPBUtil::checkUint32($var);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * TODO: REPLACE
     *
     * Generated from protobuf field <code>.meshtastic.Channel get_channel_response = 2;</code>
     * @return \Meshtastic\Channel|null
     */
    public function getGetChannelResponse()
    {
        return $this->readOneof(2);
    }

    public function hasGetChannelResponse()
    {
        return $this->hasOneof(2);
    }

    /**
     * TODO: REPLACE
     *
     * Generated from protobuf field <code>.meshtastic.Channel get_channel_response = 2;</code>
     * @param \Meshtastic\Channel $var
     * @return $this
     */
    public function setGetChannelResponse($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\Channel::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Send the current owner data in the response to this message.
     *
     * Generated from protobuf field <code>bool get_owner_request = 3;</code>
     * @return bool
     */
    public function getGetOwnerRequest()
    {
        return $this->readOneof(3);
    }

    public function hasGetOwnerRequest()
    {
        return $this->hasOneof(3);
    }

    /**
     * Send the current owner data in the response to this message.
     *
     * Generated from protobuf field <code>bool get_owner_request = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setGetOwnerRequest($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * TODO: REPLACE
     *
     * Generated from protobuf field <code>.meshtastic.User get_owner_response = 4;</code>
     * @return \Meshtastic\User|null
     */
    public function getGetOwnerResponse()
    {
        return $this->readOneof(4);
    }

    public function hasGetOwnerResponse()
    {
        return $this->hasOneof(4);
    }

    /**
     * TODO: REPLACE
     *
     * Generated from protobuf field <code>.meshtastic.User get_owner_response = 4;</code>
     * @param \Meshtastic\User $var
     * @return $this
     */
    public function setGetOwnerResponse($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\User::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Ask for the following config data to be sent
     *
     * Generated from protobuf field <code>.meshtastic.AdminMessage.ConfigType get_config_request = 5;</code>
     * @return int
     */
    public function getGetConfigRequest()
    {
        return $this->readOneof(5);
    }

    public function hasGetConfigRequest()
    {
        return $this->hasOneof(5);
    }

    /**
     * Ask for the following config data to be sent
     *
     * Generated from protobuf field <code>.meshtastic.AdminMessage.ConfigType get_config_request = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setGetConfigRequest($var)
    {
        GPBUtil::checkEnum($var, \Meshtastic\AdminMessage\ConfigType::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Send the current Config in the response to this message.
     *
     * Generated from protobuf field <code>.meshtastic.Config get_config_response = 6;</code>
     * @return \Meshtastic\Config|null
     */
    public function getGetConfigResponse()
    {
        return $this->readOneof(6);
    }

    public function hasGetConfigResponse()
    {
        return $this->hasOneof(6);
    }

    /**
     * Send the current Config in the response to this message.
     *
     * Generated from protobuf field <code>.meshtastic.Config get_config_response = 6;</code>
     * @param \Meshtastic\Config $var
     * @return $this
     */
    public function setGetConfigResponse($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\Config::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * Ask for the following config data to be sent
     *
     * Generated from protobuf field <code>.meshtastic.AdminMessage.ModuleConfigType get_module_config_request = 7;</code>
     * @return int
     */
    public function getGetModuleConfigRequest()
    {
        return $this->readOneof(7);
    }

    public function hasGetModuleConfigRequest()
    {
        return $this->hasOneof(7);
    }

    /**
     * Ask for the following config data to be sent
     *
     * Generated from protobuf field <code>.meshtastic.AdminMessage.ModuleConfigType get_module_config_request = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setGetModuleConfigRequest($var)
    {
        GPBUtil::checkEnum($var, \Meshtastic\AdminMessage\ModuleConfigType::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * Send the current Config in the response to this message.
     *
     * Generated from protobuf field <code>.meshtastic.ModuleConfig get_module_config_response = 8;</code>
     * @return \Meshtastic\ModuleConfig|null
     */
    public function getGetModuleConfigResponse()
    {
        return $this->readOneof(8);
    }

    public function hasGetModuleConfigResponse()
    {
        return $this->hasOneof(8);
    }

    /**
     * Send the current Config in the response to this message.
     *
     * Generated from protobuf field <code>.meshtastic.ModuleConfig get_module_config_response = 8;</code>
     * @param \Meshtastic\ModuleConfig $var
     * @return $this
     */
    public function setGetModuleConfigResponse($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\ModuleConfig::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * Get the Canned Message Module messages in the response to this message.
     *
     * Generated from protobuf field <code>bool get_canned_message_module_messages_request = 10;</code>
     * @return bool
     */
    public function getGetCannedMessageModuleMessagesRequest()
    {
        return $this->readOneof(10);
    }

    public function hasGetCannedMessageModuleMessagesRequest()
    {
        return $this->hasOneof(10);
    }

    /**
     * Get the Canned Message Module messages in the response to this message.
     *
     * Generated from protobuf field <code>bool get_canned_message_module_messages_request = 10;</code>
     * @param bool $var
     * @return $this
     */
    public function setGetCannedMessageModuleMessagesRequest($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(10, $var);

        return $this;
    }

    /**
     * Get the Canned Message Module messages in the response to this message.
     *
     * Generated from protobuf field <code>string get_canned_message_module_messages_response = 11;</code>
     * @return string
     */
    public function getGetCannedMessageModuleMessagesResponse()
    {
        return $this->readOneof(11);
    }

    public function hasGetCannedMessageModuleMessagesResponse()
    {
        return $this->hasOneof(11);
    }

    /**
     * Get the Canned Message Module messages in the response to this message.
     *
     * Generated from protobuf field <code>string get_canned_message_module_messages_response = 11;</code>
     * @param string $var
     * @return $this
     */
    public function setGetCannedMessageModuleMessagesResponse($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(11, $var);

        return $this;
    }

    /**
     * Request the node to send device metadata (firmware, protobuf version, etc)
     *
     * Generated from protobuf field <code>bool get_device_metadata_request = 12;</code>
     * @return bool
     */
    public function getGetDeviceMetadataRequest()
    {
        return $this->readOneof(12);
    }

    public function hasGetDeviceMetadataRequest()
    {
        return $this->hasOneof(12);
    }

    /**
     * Request the node to send device metadata (firmware, protobuf version, etc)
     *
     * Generated from protobuf field <code>bool get_device_metadata_request = 12;</code>
     * @param bool $var
     * @return $this
     */
    public function setGetDeviceMetadataRequest($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(12, $var);

        return $this;
    }

    /**
     * Device metadata response
     *
     * Generated from protobuf field <code>.meshtastic.DeviceMetadata get_device_metadata_response = 13;</code>
     * @return \Meshtastic\DeviceMetadata|null
     */
    public function getGetDeviceMetadataResponse()
    {
        return $this->readOneof(13);
    }

    public function hasGetDeviceMetadataResponse()
    {
        return $this->hasOneof(13);
    }

    /**
     * Device metadata response
     *
     * Generated from protobuf field <code>.meshtastic.DeviceMetadata get_device_metadata_response = 13;</code>
     * @param \Meshtastic\DeviceMetadata $var
     * @return $this
     */
    public function setGetDeviceMetadataResponse($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\DeviceMetadata::class);
        $this->writeOneof(13, $var);

        return $this;
    }

    /**
     * Get the Ringtone in the response to this message.
     *
     * Generated from protobuf field <code>bool get_ringtone_request = 14;</code>
     * @return bool
     */
    public function getGetRingtoneRequest()
    {
        return $this->readOneof(14);
    }

    public function hasGetRingtoneRequest()
    {
        return $this->hasOneof(14);
    }

    /**
     * Get the Ringtone in the response to this message.
     *
     * Generated from protobuf field <code>bool get_ringtone_request = 14;</code>
     * @param bool $var
     * @return $this
     */
    public function setGetRingtoneRequest($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(14, $var);

        return $this;
    }

    /**
     * Get the Ringtone in the response to this message.
     *
     * Generated from protobuf field <code>string get_ringtone_response = 15;</code>
     * @return string
     */
    public function getGetRingtoneResponse()
    {
        return $this->readOneof(15);
    }

    public function hasGetRingtoneResponse()
    {
        return $this->hasOneof(15);
    }

    /**
     * Get the Ringtone in the response to this message.
     *
     * Generated from protobuf field <code>string get_ringtone_response = 15;</code>
     * @param string $var
     * @return $this
     */
    public function setGetRingtoneResponse($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(15, $var);

        return $this;
    }

    /**
     * Request the node to send it's connection status
     *
     * Generated from protobuf field <code>bool get_device_connection_status_request = 16;</code>
     * @return bool
     */
    public function getGetDeviceConnectionStatusRequest()
    {
        return $this->readOneof(16);
    }

    public function hasGetDeviceConnectionStatusRequest()
    {
        return $this->hasOneof(16);
    }

    /**
     * Request the node to send it's connection status
     *
     * Generated from protobuf field <code>bool get_device_connection_status_request = 16;</code>
     * @param bool $var
     * @return $this
     */
    public function setGetDeviceConnectionStatusRequest($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(16, $var);

        return $this;
    }

    /**
     * Device connection status response
     *
     * Generated from protobuf field <code>.meshtastic.DeviceConnectionStatus get_device_connection_status_response = 17;</code>
     * @return \Meshtastic\DeviceConnectionStatus|null
     */
    public function getGetDeviceConnectionStatusResponse()
    {
        return $this->readOneof(17);
    }

    public function hasGetDeviceConnectionStatusResponse()
    {
        return $this->hasOneof(17);
    }

    /**
     * Device connection status response
     *
     * Generated from protobuf field <code>.meshtastic.DeviceConnectionStatus get_device_connection_status_response = 17;</code>
     * @param \Meshtastic\DeviceConnectionStatus $var
     * @return $this
     */
    public function setGetDeviceConnectionStatusResponse($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\DeviceConnectionStatus::class);
        $this->writeOneof(17, $var);

        return $this;
    }

    /**
     * Setup a node for licensed amateur (ham) radio operation
     *
     * Generated from protobuf field <code>.meshtastic.HamParameters set_ham_mode = 18;</code>
     * @return \Meshtastic\HamParameters|null
     */
    public function getSetHamMode()
    {
        return $this->readOneof(18);
    }

    public function hasSetHamMode()
    {
        return $this->hasOneof(18);
    }

    /**
     * Setup a node for licensed amateur (ham) radio operation
     *
     * Generated from protobuf field <code>.meshtastic.HamParameters set_ham_mode = 18;</code>
     * @param \Meshtastic\HamParameters $var
     * @return $this
     */
    public function setSetHamMode($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\HamParameters::class);
        $this->writeOneof(18, $var);

        return $this;
    }

    /**
     * Get the mesh's nodes with their available gpio pins for RemoteHardware module use
     *
     * Generated from protobuf field <code>bool get_node_remote_hardware_pins_request = 19;</code>
     * @return bool
     */
    public function getGetNodeRemoteHardwarePinsRequest()
    {
        return $this->readOneof(19);
    }

    public function hasGetNodeRemoteHardwarePinsRequest()
    {
        return $this->hasOneof(19);
    }

    /**
     * Get the mesh's nodes with their available gpio pins for RemoteHardware module use
     *
     * Generated from protobuf field <code>bool get_node_remote_hardware_pins_request = 19;</code>
     * @param bool $var
     * @return $this
     */
    public function setGetNodeRemoteHardwarePinsRequest($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(19, $var);

        return $this;
    }

    /**
     * Respond with the mesh's nodes with their available gpio pins for RemoteHardware module use
     *
     * Generated from protobuf field <code>.meshtastic.NodeRemoteHardwarePinsResponse get_node_remote_hardware_pins_response = 20;</code>
     * @return \Meshtastic\NodeRemoteHardwarePinsResponse|null
     */
    public function getGetNodeRemoteHardwarePinsResponse()
    {
        return $this->readOneof(20);
    }

    public function hasGetNodeRemoteHardwarePinsResponse()
    {
        return $this->hasOneof(20);
    }

    /**
     * Respond with the mesh's nodes with their available gpio pins for RemoteHardware module use
     *
     * Generated from protobuf field <code>.meshtastic.NodeRemoteHardwarePinsResponse get_node_remote_hardware_pins_response = 20;</code>
     * @param \Meshtastic\NodeRemoteHardwarePinsResponse $var
     * @return $this
     */
    public function setGetNodeRemoteHardwarePinsResponse($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\NodeRemoteHardwarePinsResponse::class);
        $this->writeOneof(20, $var);

        return $this;
    }

    /**
     * Enter (UF2) DFU mode
     * Only implemented on NRF52 currently
     *
     * Generated from protobuf field <code>bool enter_dfu_mode_request = 21;</code>
     * @return bool
     */
    public function getEnterDfuModeRequest()
    {
        return $this->readOneof(21);
    }

    public function hasEnterDfuModeRequest()
    {
        return $this->hasOneof(21);
    }

    /**
     * Enter (UF2) DFU mode
     * Only implemented on NRF52 currently
     *
     * Generated from protobuf field <code>bool enter_dfu_mode_request = 21;</code>
     * @param bool $var
     * @return $this
     */
    public function setEnterDfuModeRequest($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(21, $var);

        return $this;
    }

    /**
     * Delete the file by the specified path from the device
     *
     * Generated from protobuf field <code>string delete_file_request = 22;</code>
     * @return string
     */
    public function getDeleteFileRequest()
    {
        return $this->readOneof(22);
    }

    public function hasDeleteFileRequest()
    {
        return $this->hasOneof(22);
    }

    /**
     * Delete the file by the specified path from the device
     *
     * Generated from protobuf field <code>string delete_file_request = 22;</code>
     * @param string $var
     * @return $this
     */
    public function setDeleteFileRequest($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(22, $var);

        return $this;
    }

    /**
     * Set zero and offset for scale chips
     *
     * Generated from protobuf field <code>uint32 set_scale = 23;</code>
     * @return int
     */
    public function getSetScale()
    {
        return $this->readOneof(23);
    }

    public function hasSetScale()
    {
        return $this->hasOneof(23);
    }

    /**
     * Set zero and offset for scale chips
     *
     * Generated from protobuf field <code>uint32 set_scale = 23;</code>
     * @param int $var
     * @return $this
     */
    public function setSetScale($var)
    {
        GPBUtil::checkUint32($var);
        $this->writeOneof(23, $var);

        return $this;
    }

    /**
     * Backup the node's preferences
     *
     * Generated from protobuf field <code>.meshtastic.AdminMessage.BackupLocation backup_preferences = 24;</code>
     * @return int
     */
    public function getBackupPreferences()
    {
        return $this->readOneof(24);
    }

    public function hasBackupPreferences()
    {
        return $this->hasOneof(24);
    }

    /**
     * Backup the node's preferences
     *
     * Generated from protobuf field <code>.meshtastic.AdminMessage.BackupLocation backup_preferences = 24;</code>
     * @param int $var
     * @return $this
     */
    public function setBackupPreferences($var)
    {
        GPBUtil::checkEnum($var, \Meshtastic\AdminMessage\BackupLocation::class);
        $this->writeOneof(24, $var);

        return $this;
    }

    /**
     * Restore the node's preferences
     *
     * Generated from protobuf field <code>.meshtastic.AdminMessage.BackupLocation restore_preferences = 25;</code>
     * @return int
     */
    public function getRestorePreferences()
    {
        return $this->readOneof(25);
    }

    public function hasRestorePreferences()
    {
        return $this->hasOneof(25);
    }

    /**
     * Restore the node's preferences
     *
     * Generated from protobuf field <code>.meshtastic.AdminMessage.BackupLocation restore_preferences = 25;</code>
     * @param int $var
     * @return $this
     */
    public function setRestorePreferences($var)
    {
        GPBUtil::checkEnum($var, \Meshtastic\AdminMessage\BackupLocation::class);
        $this->writeOneof(25, $var);

        return $this;
    }

    /**
     * Remove backups of the node's preferences
     *
     * Generated from protobuf field <code>.meshtastic.AdminMessage.BackupLocation remove_backup_preferences = 26;</code>
     * @return int
     */
    public function getRemoveBackupPreferences()
    {
        return $this->readOneof(26);
    }

    public function hasRemoveBackupPreferences()
    {
        return $this->hasOneof(26);
    }

    /**
     * Remove backups of the node's preferences
     *
     * Generated from protobuf field <code>.meshtastic.AdminMessage.BackupLocation remove_backup_preferences = 26;</code>
     * @param int $var
     * @return $this
     */
    public function setRemoveBackupPreferences($var)
    {
        GPBUtil::checkEnum($var, \Meshtastic\AdminMessage\BackupLocation::class);
        $this->writeOneof(26, $var);

        return $this;
    }

    /**
     * Send an input event to the node.
     * This is used to trigger physical input events like button presses, touch events, etc.
     *
     * Generated from protobuf field <code>.meshtastic.AdminMessage.InputEvent send_input_event = 27;</code>
     * @return \Meshtastic\AdminMessage\InputEvent|null
     */
    public function getSendInputEvent()
    {
        return $this->readOneof(27);
    }

    public function hasSendInputEvent()
    {
        return $this->hasOneof(27);
    }

    /**
     * Send an input event to the node.
     * This is used to trigger physical input events like button presses, touch events, etc.
     *
     * Generated from protobuf field <code>.meshtastic.AdminMessage.InputEvent send_input_event = 27;</code>
     * @param \Meshtastic\AdminMessage\InputEvent $var
     * @return $this
     */
    public function setSendInputEvent($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\AdminMessage\InputEvent::class);
        $this->writeOneof(27, $var);

        return $this;
    }

    /**
     * Set the owner for this node
     *
     * Generated from protobuf field <code>.meshtastic.User set_owner = 32;</code>
     * @return \Meshtastic\User|null
     */
    public function getSetOwner()
    {
        return $this->readOneof(32);
    }

    public function hasSetOwner()
    {
        return $this->hasOneof(32);
    }

    /**
     * Set the owner for this node
     *
     * Generated from protobuf field <code>.meshtastic.User set_owner = 32;</code>
     * @param \Meshtastic\User $var
     * @return $this
     */
    public function setSetOwner($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\User::class);
        $this->writeOneof(32, $var);

        return $this;
    }

    /**
     * Set channels (using the new API).
     * A special channel is the "primary channel".
     * The other records are secondary channels.
     * Note: only one channel can be marked as primary.
     * If the client sets a particular channel to be primary, the previous channel will be set to SECONDARY automatically.
     *
     * Generated from protobuf field <code>.meshtastic.Channel set_channel = 33;</code>
     * @return \Meshtastic\Channel|null
     */
    public function getSetChannel()
    {
        return $this->readOneof(33);
    }

    public function hasSetChannel()
    {
        return $this->hasOneof(33);
    }

    /**
     * Set channels (using the new API).
     * A special channel is the "primary channel".
     * The other records are secondary channels.
     * Note: only one channel can be marked as primary.
     * If the client sets a particular channel to be primary, the previous channel will be set to SECONDARY automatically.
     *
     * Generated from protobuf field <code>.meshtastic.Channel set_channel = 33;</code>
     * @param \Meshtastic\Channel $var
     * @return $this
     */
    public function setSetChannel($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\Channel::class);
        $this->writeOneof(33, $var);

        return $this;
    }

    /**
     * Set the current Config
     *
     * Generated from protobuf field <code>.meshtastic.Config set_config = 34;</code>
     * @return \Meshtastic\Config|null
     */
    public function getSetConfig()
    {
        return $this->readOneof(34);
    }

    public function hasSetConfig()
    {
        return $this->hasOneof(34);
    }

    /**
     * Set the current Config
     *
     * Generated from protobuf field <code>.meshtastic.Config set_config = 34;</code>
     * @param \Meshtastic\Config $var
     * @return $this
     */
    public function setSetConfig($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\Config::class);
        $this->writeOneof(34, $var);

        return $this;
    }

    /**
     * Set the current Config
     *
     * Generated from protobuf field <code>.meshtastic.ModuleConfig set_module_config = 35;</code>
     * @return \Meshtastic\ModuleConfig|null
     */
    public function getSetModuleConfig()
    {
        return $this->readOneof(35);
    }

    public function hasSetModuleConfig()
    {
        return $this->hasOneof(35);
    }

    /**
     * Set the current Config
     *
     * Generated from protobuf field <code>.meshtastic.ModuleConfig set_module_config = 35;</code>
     * @param \Meshtastic\ModuleConfig $var
     * @return $this
     */
    public function setSetModuleConfig($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\ModuleConfig::class);
        $this->writeOneof(35, $var);

        return $this;
    }

    /**
     * Set the Canned Message Module messages text.
     *
     * Generated from protobuf field <code>string set_canned_message_module_messages = 36;</code>
     * @return string
     */
    public function getSetCannedMessageModuleMessages()
    {
        return $this->readOneof(36);
    }

    public function hasSetCannedMessageModuleMessages()
    {
        return $this->hasOneof(36);
    }

    /**
     * Set the Canned Message Module messages text.
     *
     * Generated from protobuf field <code>string set_canned_message_module_messages = 36;</code>
     * @param string $var
     * @return $this
     */
    public function setSetCannedMessageModuleMessages($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(36, $var);

        return $this;
    }

    /**
     * Set the ringtone for ExternalNotification.
     *
     * Generated from protobuf field <code>string set_ringtone_message = 37;</code>
     * @return string
     */
    public function getSetRingtoneMessage()
    {
        return $this->readOneof(37);
    }

    public function hasSetRingtoneMessage()
    {
        return $this->hasOneof(37);
    }

    /**
     * Set the ringtone for ExternalNotification.
     *
     * Generated from protobuf field <code>string set_ringtone_message = 37;</code>
     * @param string $var
     * @return $this
     */
    public function setSetRingtoneMessage($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(37, $var);

        return $this;
    }

    /**
     * Remove the node by the specified node-num from the NodeDB on the device
     *
     * Generated from protobuf field <code>uint32 remove_by_nodenum = 38;</code>
     * @return int
     */
    public function getRemoveByNodenum()
    {
        return $this->readOneof(38);
    }

    public function hasRemoveByNodenum()
    {
        return $this->hasOneof(38);
    }

    /**
     * Remove the node by the specified node-num from the NodeDB on the device
     *
     * Generated from protobuf field <code>uint32 remove_by_nodenum = 38;</code>
     * @param int $var
     * @return $this
     */
    public function setRemoveByNodenum($var)
    {
        GPBUtil::checkUint32($var);
        $this->writeOneof(38, $var);

        return $this;
    }

    /**
     * Set specified node-num to be favorited on the NodeDB on the device
     *
     * Generated from protobuf field <code>uint32 set_favorite_node = 39;</code>
     * @return int
     */
    public function getSetFavoriteNode()
    {
        return $this->readOneof(39);
    }

    public function hasSetFavoriteNode()
    {
        return $this->hasOneof(39);
    }

    /**
     * Set specified node-num to be favorited on the NodeDB on the device
     *
     * Generated from protobuf field <code>uint32 set_favorite_node = 39;</code>
     * @param int $var
     * @return $this
     */
    public function setSetFavoriteNode($var)
    {
        GPBUtil::checkUint32($var);
        $this->writeOneof(39, $var);

        return $this;
    }

    /**
     * Set specified node-num to be un-favorited on the NodeDB on the device
     *
     * Generated from protobuf field <code>uint32 remove_favorite_node = 40;</code>
     * @return int
     */
    public function getRemoveFavoriteNode()
    {
        return $this->readOneof(40);
    }

    public function hasRemoveFavoriteNode()
    {
        return $this->hasOneof(40);
    }

    /**
     * Set specified node-num to be un-favorited on the NodeDB on the device
     *
     * Generated from protobuf field <code>uint32 remove_favorite_node = 40;</code>
     * @param int $var
     * @return $this
     */
    public function setRemoveFavoriteNode($var)
    {
        GPBUtil::checkUint32($var);
        $this->writeOneof(40, $var);

        return $this;
    }

    /**
     * Set fixed position data on the node and then set the position.fixed_position = true
     *
     * Generated from protobuf field <code>.meshtastic.Position set_fixed_position = 41;</code>
     * @return \Meshtastic\Position|null
     */
    public function getSetFixedPosition()
    {
        return $this->readOneof(41);
    }

    public function hasSetFixedPosition()
    {
        return $this->hasOneof(41);
    }

    /**
     * Set fixed position data on the node and then set the position.fixed_position = true
     *
     * Generated from protobuf field <code>.meshtastic.Position set_fixed_position = 41;</code>
     * @param \Meshtastic\Position $var
     * @return $this
     */
    public function setSetFixedPosition($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\Position::class);
        $this->writeOneof(41, $var);

        return $this;
    }

    /**
     * Clear fixed position coordinates and then set position.fixed_position = false
     *
     * Generated from protobuf field <code>bool remove_fixed_position = 42;</code>
     * @return bool
     */
    public function getRemoveFixedPosition()
    {
        return $this->readOneof(42);
    }

    public function hasRemoveFixedPosition()
    {
        return $this->hasOneof(42);
    }

    /**
     * Clear fixed position coordinates and then set position.fixed_position = false
     *
     * Generated from protobuf field <code>bool remove_fixed_position = 42;</code>
     * @param bool $var
     * @return $this
     */
    public function setRemoveFixedPosition($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(42, $var);

        return $this;
    }

    /**
     * Set time only on the node
     * Convenience method to set the time on the node (as Net quality) without any other position data
     *
     * Generated from protobuf field <code>fixed32 set_time_only = 43;</code>
     * @return int
     */
    public function getSetTimeOnly()
    {
        return $this->readOneof(43);
    }

    public function hasSetTimeOnly()
    {
        return $this->hasOneof(43);
    }

    /**
     * Set time only on the node
     * Convenience method to set the time on the node (as Net quality) without any other position data
     *
     * Generated from protobuf field <code>fixed32 set_time_only = 43;</code>
     * @param int $var
     * @return $this
     */
    public function setSetTimeOnly($var)
    {
        GPBUtil::checkUint32($var);
        $this->writeOneof(43, $var);

        return $this;
    }

    /**
     * Tell the node to send the stored ui data.
     *
     * Generated from protobuf field <code>bool get_ui_config_request = 44;</code>
     * @return bool
     */
    public function getGetUiConfigRequest()
    {
        return $this->readOneof(44);
    }

    public function hasGetUiConfigRequest()
    {
        return $this->hasOneof(44);
    }

    /**
     * Tell the node to send the stored ui data.
     *
     * Generated from protobuf field <code>bool get_ui_config_request = 44;</code>
     * @param bool $var
     * @return $this
     */
    public function setGetUiConfigRequest($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(44, $var);

        return $this;
    }

    /**
     * Reply stored device ui data.
     *
     * Generated from protobuf field <code>.meshtastic.DeviceUIConfig get_ui_config_response = 45;</code>
     * @return \Meshtastic\DeviceUIConfig|null
     */
    public function getGetUiConfigResponse()
    {
        return $this->readOneof(45);
    }

    public function hasGetUiConfigResponse()
    {
        return $this->hasOneof(45);
    }

    /**
     * Reply stored device ui data.
     *
     * Generated from protobuf field <code>.meshtastic.DeviceUIConfig get_ui_config_response = 45;</code>
     * @param \Meshtastic\DeviceUIConfig $var
     * @return $this
     */
    public function setGetUiConfigResponse($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\DeviceUIConfig::class);
        $this->writeOneof(45, $var);

        return $this;
    }

    /**
     * Tell the node to store UI data persistently.
     *
     * Generated from protobuf field <code>.meshtastic.DeviceUIConfig store_ui_config = 46;</code>
     * @return \Meshtastic\DeviceUIConfig|null
     */
    public function getStoreUiConfig()
    {
        return $this->readOneof(46);
    }

    public function hasStoreUiConfig()
    {
        return $this->hasOneof(46);
    }

    /**
     * Tell the node to store UI data persistently.
     *
     * Generated from protobuf field <code>.meshtastic.DeviceUIConfig store_ui_config = 46;</code>
     * @param \Meshtastic\DeviceUIConfig $var
     * @return $this
     */
    public function setStoreUiConfig($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\DeviceUIConfig::class);
        $this->writeOneof(46, $var);

        return $this;
    }

    /**
     * Set specified node-num to be ignored on the NodeDB on the device
     *
     * Generated from protobuf field <code>uint32 set_ignored_node = 47;</code>
     * @return int
     */
    public function getSetIgnoredNode()
    {
        return $this->readOneof(47);
    }

    public function hasSetIgnoredNode()
    {
        return $this->hasOneof(47);
    }

    /**
     * Set specified node-num to be ignored on the NodeDB on the device
     *
     * Generated from protobuf field <code>uint32 set_ignored_node = 47;</code>
     * @param int $var
     * @return $this
     */
    public function setSetIgnoredNode($var)
    {
        GPBUtil::checkUint32($var);
        $this->writeOneof(47, $var);

        return $this;
    }

    /**
     * Set specified node-num to be un-ignored on the NodeDB on the device
     *
     * Generated from protobuf field <code>uint32 remove_ignored_node = 48;</code>
     * @return int
     */
    public function getRemoveIgnoredNode()
    {
        return $this->readOneof(48);
    }

    public function hasRemoveIgnoredNode()
    {
        return $this->hasOneof(48);
    }

    /**
     * Set specified node-num to be un-ignored on the NodeDB on the device
     *
     * Generated from protobuf field <code>uint32 remove_ignored_node = 48;</code>
     * @param int $var
     * @return $this
     */
    public function setRemoveIgnoredNode($var)
    {
        GPBUtil::checkUint32($var);
        $this->writeOneof(48, $var);

        return $this;
    }

    /**
     * Begins an edit transaction for config, module config, owner, and channel settings changes
     * This will delay the standard *implicit* save to the file system and subsequent reboot behavior until committed (commit_edit_settings)
     *
     * Generated from protobuf field <code>bool begin_edit_settings = 64;</code>
     * @return bool
     */
    public function getBeginEditSettings()
    {
        return $this->readOneof(64);
    }

    public function hasBeginEditSettings()
    {
        return $this->hasOneof(64);
    }

    /**
     * Begins an edit transaction for config, module config, owner, and channel settings changes
     * This will delay the standard *implicit* save to the file system and subsequent reboot behavior until committed (commit_edit_settings)
     *
     * Generated from protobuf field <code>bool begin_edit_settings = 64;</code>
     * @param bool $var
     * @return $this
     */
    public function setBeginEditSettings($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(64, $var);

        return $this;
    }

    /**
     * Commits an open transaction for any edits made to config, module config, owner, and channel settings
     *
     * Generated from protobuf field <code>bool commit_edit_settings = 65;</code>
     * @return bool
     */
    public function getCommitEditSettings()
    {
        return $this->readOneof(65);
    }

    public function hasCommitEditSettings()
    {
        return $this->hasOneof(65);
    }

    /**
     * Commits an open transaction for any edits made to config, module config, owner, and channel settings
     *
     * Generated from protobuf field <code>bool commit_edit_settings = 65;</code>
     * @param bool $var
     * @return $this
     */
    public function setCommitEditSettings($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(65, $var);

        return $this;
    }

    /**
     * Add a contact (User) to the nodedb
     *
     * Generated from protobuf field <code>.meshtastic.SharedContact add_contact = 66;</code>
     * @return \Meshtastic\SharedContact|null
     */
    public function getAddContact()
    {
        return $this->readOneof(66);
    }

    public function hasAddContact()
    {
        return $this->hasOneof(66);
    }

    /**
     * Add a contact (User) to the nodedb
     *
     * Generated from protobuf field <code>.meshtastic.SharedContact add_contact = 66;</code>
     * @param \Meshtastic\SharedContact $var
     * @return $this
     */
    public function setAddContact($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\SharedContact::class);
        $this->writeOneof(66, $var);

        return $this;
    }

    /**
     * Initiate or respond to a key verification request
     *
     * Generated from protobuf field <code>.meshtastic.KeyVerificationAdmin key_verification = 67;</code>
     * @return \Meshtastic\KeyVerificationAdmin|null
     */
    public function getKeyVerification()
    {
        return $this->readOneof(67);
    }

    public function hasKeyVerification()
    {
        return $this->hasOneof(67);
    }

    /**
     * Initiate or respond to a key verification request
     *
     * Generated from protobuf field <code>.meshtastic.KeyVerificationAdmin key_verification = 67;</code>
     * @param \Meshtastic\KeyVerificationAdmin $var
     * @return $this
     */
    public function setKeyVerification($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\KeyVerificationAdmin::class);
        $this->writeOneof(67, $var);

        return $this;
    }

    /**
     * Tell the node to factory reset config everything; all device state and configuration will be returned to factory defaults and BLE bonds will be cleared.
     *
     * Generated from protobuf field <code>int32 factory_reset_device = 94;</code>
     * @return int
     */
    public function getFactoryResetDevice()
    {
        return $this->readOneof(94);
    }

    public function hasFactoryResetDevice()
    {
        return $this->hasOneof(94);
    }

    /**
     * Tell the node to factory reset config everything; all device state and configuration will be returned to factory defaults and BLE bonds will be cleared.
     *
     * Generated from protobuf field <code>int32 factory_reset_device = 94;</code>
     * @param int $var
     * @return $this
     */
    public function setFactoryResetDevice($var)
    {
        GPBUtil::checkInt32($var);
        $this->writeOneof(94, $var);

        return $this;
    }

    /**
     * Tell the node to reboot into the OTA Firmware in this many seconds (or <0 to cancel reboot)
     * Only Implemented for ESP32 Devices. This needs to be issued to send a new main firmware via bluetooth.
     *
     * Generated from protobuf field <code>int32 reboot_ota_seconds = 95;</code>
     * @return int
     */
    public function getRebootOtaSeconds()
    {
        return $this->readOneof(95);
    }

    public function hasRebootOtaSeconds()
    {
        return $this->hasOneof(95);
    }

    /**
     * Tell the node to reboot into the OTA Firmware in this many seconds (or <0 to cancel reboot)
     * Only Implemented for ESP32 Devices. This needs to be issued to send a new main firmware via bluetooth.
     *
     * Generated from protobuf field <code>int32 reboot_ota_seconds = 95;</code>
     * @param int $var
     * @return $this
     */
    public function setRebootOtaSeconds($var)
    {
        GPBUtil::checkInt32($var);
        $this->writeOneof(95, $var);

        return $this;
    }

    /**
     * This message is only supported for the simulator Portduino build.
     * If received the simulator will exit successfully.
     *
     * Generated from protobuf field <code>bool exit_simulator = 96;</code>
     * @return bool
     */
    public function getExitSimulator()
    {
        return $this->readOneof(96);
    }

    public function hasExitSimulator()
    {
        return $this->hasOneof(96);
    }

    /**
     * This message is only supported for the simulator Portduino build.
     * If received the simulator will exit successfully.
     *
     * Generated from protobuf field <code>bool exit_simulator = 96;</code>
     * @param bool $var
     * @return $this
     */
    public function setExitSimulator($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(96, $var);

        return $this;
    }

    /**
     * Tell the node to reboot in this many seconds (or <0 to cancel reboot)
     *
     * Generated from protobuf field <code>int32 reboot_seconds = 97;</code>
     * @return int
     */
    public function getRebootSeconds()
    {
        return $this->readOneof(97);
    }

    public function hasRebootSeconds()
    {
        return $this->hasOneof(97);
    }

    /**
     * Tell the node to reboot in this many seconds (or <0 to cancel reboot)
     *
     * Generated from protobuf field <code>int32 reboot_seconds = 97;</code>
     * @param int $var
     * @return $this
     */
    public function setRebootSeconds($var)
    {
        GPBUtil::checkInt32($var);
        $this->writeOneof(97, $var);

        return $this;
    }

    /**
     * Tell the node to shutdown in this many seconds (or <0 to cancel shutdown)
     *
     * Generated from protobuf field <code>int32 shutdown_seconds = 98;</code>
     * @return int
     */
    public function getShutdownSeconds()
    {
        return $this->readOneof(98);
    }

    public function hasShutdownSeconds()
    {
        return $this->hasOneof(98);
    }

    /**
     * Tell the node to shutdown in this many seconds (or <0 to cancel shutdown)
     *
     * Generated from protobuf field <code>int32 shutdown_seconds = 98;</code>
     * @param int $var
     * @return $this
     */
    public function setShutdownSeconds($var)
    {
        GPBUtil::checkInt32($var);
        $this->writeOneof(98, $var);

        return $this;
    }

    /**
     * Tell the node to factory reset config; all device state and configuration will be returned to factory defaults; BLE bonds will be preserved.
     *
     * Generated from protobuf field <code>int32 factory_reset_config = 99;</code>
     * @return int
     */
    public function getFactoryResetConfig()
    {
        return $this->readOneof(99);
    }

    public function hasFactoryResetConfig()
    {
        return $this->hasOneof(99);
    }

    /**
     * Tell the node to factory reset config; all device state and configuration will be returned to factory defaults; BLE bonds will be preserved.
     *
     * Generated from protobuf field <code>int32 factory_reset_config = 99;</code>
     * @param int $var
     * @return $this
     */
    public function setFactoryResetConfig($var)
    {
        GPBUtil::checkInt32($var);
        $this->writeOneof(99, $var);

        return $this;
    }

    /**
     * Tell the node to reset the nodedb.
     *
     * Generated from protobuf field <code>int32 nodedb_reset = 100;</code>
     * @return int
     */
    public function getNodedbReset()
    {
        return $this->readOneof(100);
    }

    public function hasNodedbReset()
    {
        return $this->hasOneof(100);
    }

    /**
     * Tell the node to reset the nodedb.
     *
     * Generated from protobuf field <code>int32 nodedb_reset = 100;</code>
     * @param int $var
     * @return $this
     */
    public function setNodedbReset($var)
    {
        GPBUtil::checkInt32($var);
        $this->writeOneof(100, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getPayloadVariant()
    {
        return $this->whichOneof("payload_variant");
    }

}

