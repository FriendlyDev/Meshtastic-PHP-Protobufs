<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: meshtastic/deviceonly.proto

namespace Meshtastic;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * This message is never sent over the wire, but it is used for serializing DB
 * state to flash in the device code
 * FIXME, since we write this each time we enter deep sleep (and have infinite
 * flash) it would be better to use some sort of append only data structure for
 * the receive queue and use the preferences store for the other stuff
 *
 * Generated from protobuf message <code>meshtastic.DeviceState</code>
 */
class DeviceState extends \Google\Protobuf\Internal\Message
{
    /**
     * Read only settings/info about this node
     *
     * Generated from protobuf field <code>.meshtastic.MyNodeInfo my_node = 2;</code>
     */
    protected $my_node = null;
    /**
     * My owner info
     *
     * Generated from protobuf field <code>.meshtastic.User owner = 3;</code>
     */
    protected $owner = null;
    /**
     * Received packets saved for delivery to the phone
     *
     * Generated from protobuf field <code>repeated .meshtastic.MeshPacket receive_queue = 5;</code>
     */
    private $receive_queue;
    /**
     * A version integer used to invalidate old save files when we make
     * incompatible changes This integer is set at build time and is private to
     * NodeDB.cpp in the device code.
     *
     * Generated from protobuf field <code>uint32 version = 8;</code>
     */
    protected $version = 0;
    /**
     * We keep the last received text message (only) stored in the device flash,
     * so we can show it on the screen.
     * Might be null
     *
     * Generated from protobuf field <code>.meshtastic.MeshPacket rx_text_message = 7;</code>
     */
    protected $rx_text_message = null;
    /**
     * Used only during development.
     * Indicates developer is testing and changes should never be saved to flash.
     * Deprecated in 2.3.1
     *
     * Generated from protobuf field <code>bool no_save = 9 [deprecated = true];</code>
     * @deprecated
     */
    protected $no_save = false;
    /**
     * Previously used to manage GPS factory resets.
     * Deprecated in 2.5.23
     *
     * Generated from protobuf field <code>bool did_gps_reset = 11 [deprecated = true];</code>
     * @deprecated
     */
    protected $did_gps_reset = false;
    /**
     * We keep the last received waypoint stored in the device flash,
     * so we can show it on the screen.
     * Might be null
     *
     * Generated from protobuf field <code>.meshtastic.MeshPacket rx_waypoint = 12;</code>
     */
    protected $rx_waypoint = null;
    /**
     * The mesh's nodes with their available gpio pins for RemoteHardware module
     *
     * Generated from protobuf field <code>repeated .meshtastic.NodeRemoteHardwarePin node_remote_hardware_pins = 13;</code>
     */
    private $node_remote_hardware_pins;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Meshtastic\MyNodeInfo $my_node
     *           Read only settings/info about this node
     *     @type \Meshtastic\User $owner
     *           My owner info
     *     @type array<\Meshtastic\MeshPacket>|\Google\Protobuf\Internal\RepeatedField $receive_queue
     *           Received packets saved for delivery to the phone
     *     @type int $version
     *           A version integer used to invalidate old save files when we make
     *           incompatible changes This integer is set at build time and is private to
     *           NodeDB.cpp in the device code.
     *     @type \Meshtastic\MeshPacket $rx_text_message
     *           We keep the last received text message (only) stored in the device flash,
     *           so we can show it on the screen.
     *           Might be null
     *     @type bool $no_save
     *           Used only during development.
     *           Indicates developer is testing and changes should never be saved to flash.
     *           Deprecated in 2.3.1
     *     @type bool $did_gps_reset
     *           Previously used to manage GPS factory resets.
     *           Deprecated in 2.5.23
     *     @type \Meshtastic\MeshPacket $rx_waypoint
     *           We keep the last received waypoint stored in the device flash,
     *           so we can show it on the screen.
     *           Might be null
     *     @type array<\Meshtastic\NodeRemoteHardwarePin>|\Google\Protobuf\Internal\RepeatedField $node_remote_hardware_pins
     *           The mesh's nodes with their available gpio pins for RemoteHardware module
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Meshtastic\Deviceonly::initOnce();
        parent::__construct($data);
    }

    /**
     * Read only settings/info about this node
     *
     * Generated from protobuf field <code>.meshtastic.MyNodeInfo my_node = 2;</code>
     * @return \Meshtastic\MyNodeInfo|null
     */
    public function getMyNode()
    {
        return $this->my_node;
    }

    public function hasMyNode()
    {
        return isset($this->my_node);
    }

    public function clearMyNode()
    {
        unset($this->my_node);
    }

    /**
     * Read only settings/info about this node
     *
     * Generated from protobuf field <code>.meshtastic.MyNodeInfo my_node = 2;</code>
     * @param \Meshtastic\MyNodeInfo $var
     * @return $this
     */
    public function setMyNode($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\MyNodeInfo::class);
        $this->my_node = $var;

        return $this;
    }

    /**
     * My owner info
     *
     * Generated from protobuf field <code>.meshtastic.User owner = 3;</code>
     * @return \Meshtastic\User|null
     */
    public function getOwner()
    {
        return $this->owner;
    }

    public function hasOwner()
    {
        return isset($this->owner);
    }

    public function clearOwner()
    {
        unset($this->owner);
    }

    /**
     * My owner info
     *
     * Generated from protobuf field <code>.meshtastic.User owner = 3;</code>
     * @param \Meshtastic\User $var
     * @return $this
     */
    public function setOwner($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\User::class);
        $this->owner = $var;

        return $this;
    }

    /**
     * Received packets saved for delivery to the phone
     *
     * Generated from protobuf field <code>repeated .meshtastic.MeshPacket receive_queue = 5;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getReceiveQueue()
    {
        return $this->receive_queue;
    }

    /**
     * Received packets saved for delivery to the phone
     *
     * Generated from protobuf field <code>repeated .meshtastic.MeshPacket receive_queue = 5;</code>
     * @param array<\Meshtastic\MeshPacket>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setReceiveQueue($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Meshtastic\MeshPacket::class);
        $this->receive_queue = $arr;

        return $this;
    }

    /**
     * A version integer used to invalidate old save files when we make
     * incompatible changes This integer is set at build time and is private to
     * NodeDB.cpp in the device code.
     *
     * Generated from protobuf field <code>uint32 version = 8;</code>
     * @return int
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * A version integer used to invalidate old save files when we make
     * incompatible changes This integer is set at build time and is private to
     * NodeDB.cpp in the device code.
     *
     * Generated from protobuf field <code>uint32 version = 8;</code>
     * @param int $var
     * @return $this
     */
    public function setVersion($var)
    {
        GPBUtil::checkUint32($var);
        $this->version = $var;

        return $this;
    }

    /**
     * We keep the last received text message (only) stored in the device flash,
     * so we can show it on the screen.
     * Might be null
     *
     * Generated from protobuf field <code>.meshtastic.MeshPacket rx_text_message = 7;</code>
     * @return \Meshtastic\MeshPacket|null
     */
    public function getRxTextMessage()
    {
        return $this->rx_text_message;
    }

    public function hasRxTextMessage()
    {
        return isset($this->rx_text_message);
    }

    public function clearRxTextMessage()
    {
        unset($this->rx_text_message);
    }

    /**
     * We keep the last received text message (only) stored in the device flash,
     * so we can show it on the screen.
     * Might be null
     *
     * Generated from protobuf field <code>.meshtastic.MeshPacket rx_text_message = 7;</code>
     * @param \Meshtastic\MeshPacket $var
     * @return $this
     */
    public function setRxTextMessage($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\MeshPacket::class);
        $this->rx_text_message = $var;

        return $this;
    }

    /**
     * Used only during development.
     * Indicates developer is testing and changes should never be saved to flash.
     * Deprecated in 2.3.1
     *
     * Generated from protobuf field <code>bool no_save = 9 [deprecated = true];</code>
     * @return bool
     * @deprecated
     */
    public function getNoSave()
    {
        @trigger_error('no_save is deprecated.', E_USER_DEPRECATED);
        return $this->no_save;
    }

    /**
     * Used only during development.
     * Indicates developer is testing and changes should never be saved to flash.
     * Deprecated in 2.3.1
     *
     * Generated from protobuf field <code>bool no_save = 9 [deprecated = true];</code>
     * @param bool $var
     * @return $this
     * @deprecated
     */
    public function setNoSave($var)
    {
        @trigger_error('no_save is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkBool($var);
        $this->no_save = $var;

        return $this;
    }

    /**
     * Previously used to manage GPS factory resets.
     * Deprecated in 2.5.23
     *
     * Generated from protobuf field <code>bool did_gps_reset = 11 [deprecated = true];</code>
     * @return bool
     * @deprecated
     */
    public function getDidGpsReset()
    {
        @trigger_error('did_gps_reset is deprecated.', E_USER_DEPRECATED);
        return $this->did_gps_reset;
    }

    /**
     * Previously used to manage GPS factory resets.
     * Deprecated in 2.5.23
     *
     * Generated from protobuf field <code>bool did_gps_reset = 11 [deprecated = true];</code>
     * @param bool $var
     * @return $this
     * @deprecated
     */
    public function setDidGpsReset($var)
    {
        @trigger_error('did_gps_reset is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkBool($var);
        $this->did_gps_reset = $var;

        return $this;
    }

    /**
     * We keep the last received waypoint stored in the device flash,
     * so we can show it on the screen.
     * Might be null
     *
     * Generated from protobuf field <code>.meshtastic.MeshPacket rx_waypoint = 12;</code>
     * @return \Meshtastic\MeshPacket|null
     */
    public function getRxWaypoint()
    {
        return $this->rx_waypoint;
    }

    public function hasRxWaypoint()
    {
        return isset($this->rx_waypoint);
    }

    public function clearRxWaypoint()
    {
        unset($this->rx_waypoint);
    }

    /**
     * We keep the last received waypoint stored in the device flash,
     * so we can show it on the screen.
     * Might be null
     *
     * Generated from protobuf field <code>.meshtastic.MeshPacket rx_waypoint = 12;</code>
     * @param \Meshtastic\MeshPacket $var
     * @return $this
     */
    public function setRxWaypoint($var)
    {
        GPBUtil::checkMessage($var, \Meshtastic\MeshPacket::class);
        $this->rx_waypoint = $var;

        return $this;
    }

    /**
     * The mesh's nodes with their available gpio pins for RemoteHardware module
     *
     * Generated from protobuf field <code>repeated .meshtastic.NodeRemoteHardwarePin node_remote_hardware_pins = 13;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getNodeRemoteHardwarePins()
    {
        return $this->node_remote_hardware_pins;
    }

    /**
     * The mesh's nodes with their available gpio pins for RemoteHardware module
     *
     * Generated from protobuf field <code>repeated .meshtastic.NodeRemoteHardwarePin node_remote_hardware_pins = 13;</code>
     * @param array<\Meshtastic\NodeRemoteHardwarePin>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setNodeRemoteHardwarePins($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Meshtastic\NodeRemoteHardwarePin::class);
        $this->node_remote_hardware_pins = $arr;

        return $this;
    }

}

